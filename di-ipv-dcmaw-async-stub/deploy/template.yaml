AWSTemplateFormatVersion: "2010-09-09"

Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Environment:
      Variables:
        AWS_LAMBDA_EXEC_WRAPPER: /opt/dynatrace
        DT_CONNECTION_AUTH_TOKEN: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_AUTH_TOKEN}}'  #pragma: allowlist secret
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]  #pragma: allowlist secret
        DT_CONNECTION_BASE_URL: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_BASE_URL}}'   #pragma: allowlist secret
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]  #pragma: allowlist secret
        DT_CLUSTER_ID: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CLUSTER_ID}}'   #pragma: allowlist secret
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]  #pragma: allowlist secret
        DT_LOG_COLLECTION_AUTH_TOKEN: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_LOG_COLLECTION_AUTH_TOKEN}}'  #pragma: allowlist secret
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]  #pragma: allowlist secret
        DT_TENANT: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_TENANT}}'   #pragma: allowlist secret
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]   #pragma: allowlist secret
        DT_OPEN_TELEMETRY_ENABLE_INTEGRATION: "true"
    Timeout: 30
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    Layers:
      - !Sub
        - '{{resolve:secretsmanager:${SecretArn}:SecretString:JAVA_LAYER}}' # or NODEJS_LAYER or PYTHON_LAYER  #pragma: allowlist secret
        - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]  #pragma: allowlist secret

Description: >-
  This creates the infrastructure for DCMAW Async stub.

Parameters:
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
  Environment:
    Description: The name of the environment to deploy to.
    Type: String
    AllowedPattern: ((production)|(build)|(dev.*))
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply when creating IAM roles
    Type: String
    Default: "none"
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"

Conditions:
  IsProduction: !Equals [ !Ref Environment, "production" ]
  IsNonProd: !Not [!Condition IsProduction ]
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"

Mappings:
  EnvironmentConfiguration:
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables  #pragma: allowlist secret
    production:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables  #pragma: allowlist secret
  CoreAccounts:
    dev01:
      accountId: "130355686670"
    dev02:
      accountId: "175872367215"
    build:
      accountId: "457601271792"

Resources:
  # lambda to stub DCMAW Async - getDcmawVc
  GetDcmawAsyncVcFunction:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
    # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
    # checkov:skip=CKV_AWS_173: doing it later
    DependsOn:
      - "GetDcmawAsyncVcFunctionLogGroup"
    Properties:
      FunctionName: !Sub "getDcmawAsyncVc-${Environment}"
      CodeUri: "../lambdas"
      Handler: credentialHandler.handler
      Runtime: nodejs20.x
      PackageType: Zip
      Architectures:
        - arm64
      MemorySize: 2048
      Tracing: Active
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          DCMAW_ASYNC_PARAM_BASE_PATH: "/stubs/core/dcmaw-async/"
          DCMAW_ASYNC_STUB_USER_STATE_TABLE_NAME: !Ref DcmawAsyncStubUserStateTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt DcmawAsyncLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - SSMParameterReadPolicy:
            ParameterName: stubs/core/dcmaw-async/*
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBCrudPolicy:
            TableName: !Ref DcmawAsyncStubUserStateTable
      AutoPublishAlias: live
      Events:
        GetDcmawAsyncVc:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /async/credential
            Method: POST
    Metadata:
      # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - src/handlers/credentialHandler.ts

  # lambda to stub DCMAW Async GetAccessToken
  GetDcmawAsyncAccessTokenFunction:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
    # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
    # checkov:skip=CKV_AWS_173: doing it later
    DependsOn:
      - "GetDcmawAsyncAccessTokenFunctionLogGroup"
    Properties:
      FunctionName: !Sub "getDcmawAsyncAccessToken-${Environment}"
      CodeUri: "../lambdas"
      Handler: tokenHandler.handler
      Runtime: nodejs20.x
      PackageType: Zip
      Architectures:
        - arm64
      MemorySize: 2048
      Tracing: Active
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          DCMAW_ASYNC_PARAM_BASE_PATH: "/stubs/core/dcmaw-async/"
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt DcmawAsyncLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - SSMParameterReadPolicy:
            ParameterName: stubs/core/dcmaw-async/*
      AutoPublishAlias: live
      Events:
        GetDcmawAsyncAccessToken:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /async/token
            Method: POST
    Metadata:
      # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - src/handlers/tokenHandler.ts

  # lambda to stub management DCMAW Async - enqueueVc
  ManagementEnqueueVcFunction:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
    # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
    # checkov:skip=CKV_AWS_173: doing it later
    DependsOn:
      - "ManagementEnqueueVcFunctionLogGroup"
    Properties:
      FunctionName: !Sub "managementEnqueueVc-${Environment}"
      CodeUri: "../lambdas"
      Handler: managementEnqueueVcHandler.handler
      Runtime: nodejs20.x
      PackageType: Zip
      Architectures:
        - arm64
      MemorySize: 2048
      Tracing: Active
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          DCMAW_ASYNC_PARAM_BASE_PATH: "/stubs/core/dcmaw-async/"
          DCMAW_ASYNC_STUB_USER_STATE_TABLE_NAME: !Ref DcmawAsyncStubUserStateTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt DcmawAsyncLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - SSMParameterReadPolicy:
            ParameterName: stubs/core/dcmaw-async/*
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBReadPolicy:
            TableName: !Ref DcmawAsyncStubUserStateTable
      AutoPublishAlias: live
      Events:
        GetDcmawAsyncVc:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /management/enqueueVc
            Method: POST
    Metadata:
      # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - src/handlers/managementEnqueueVcHandler.ts

  # lambda to stub management DCMAW Async - cleanupDcmawState
  ManagementCleanupSessionFunction:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
    # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
    # checkov:skip=CKV_AWS_173: doing it later
    DependsOn:
      - "ManagementCleanupSessionFunctionLogGroup"
    Properties:
      FunctionName: !Sub "managementCleanupSession-${Environment}"
      CodeUri: "../lambdas"
      Handler: managementCleanupSessionHandler.handler
      Runtime: nodejs20.x
      PackageType: Zip
      Architectures:
        - arm64
      MemorySize: 2048
      Tracing: Active
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          DCMAW_ASYNC_PARAM_BASE_PATH: "/stubs/core/dcmaw-async/"
          DCMAW_ASYNC_STUB_USER_STATE_TABLE_NAME: !Ref DcmawAsyncStubUserStateTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt DcmawAsyncLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - SSMParameterReadPolicy:
            ParameterName: stubs/core/dcmaw-async/*
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBWritePolicy:
            TableName: !Ref DcmawAsyncStubUserStateTable
      AutoPublishAlias: live
      Events:
        GetDcmawAsyncVc:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /management/cleanupDcmawState
            Method: POST
    Metadata:
      # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - src/handlers/managementCleanupSessionHandler.ts

# lambda to stub management DCMAW Async - enqueueError
  ManagementEnqueueErrorFunction:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
    # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
    # checkov:skip=CKV_AWS_173: doing it later
    DependsOn:
      - "ManagementEnqueueErrorFunctionLogGroup"
    Properties:
      FunctionName: !Sub "managementEnqueueError-${Environment}"
      CodeUri: "../lambdas"
      Handler: managementEnqueueErrorHandler.handler
      Runtime: nodejs20.x
      PackageType: Zip
      Architectures:
        - arm64
      MemorySize: 2048
      Tracing: Active
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          DCMAW_ASYNC_PARAM_BASE_PATH: "/stubs/core/dcmaw-async/"
          DCMAW_ASYNC_STUB_USER_STATE_TABLE_NAME: !Ref DcmawAsyncStubUserStateTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt DcmawAsyncLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - SSMParameterReadPolicy:
            ParameterName: stubs/core/dcmaw-async/*
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBCrudPolicy:
            TableName: !Ref DcmawAsyncStubUserStateTable
      AutoPublishAlias: live
      Events:
        GetDcmawAsyncVc:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /management/enqueueError
            Method: POST
    Metadata:
      # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - src/handlers/managementEnqueueErrorHandler.ts

  GetDcmawAsyncVcFunctionCoreDev01InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetDcmawAsyncVcFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, dev01, accountId ]

  GetDcmawAsyncVcFunctionCoreDev02InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetDcmawAsyncVcFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, dev02, accountId ]

  GetDcmawAsyncVcFunctionCoreBuildInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetDcmawAsyncVcFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, build, accountId ]

  GetDcmawAsyncAccessTokenFunctionCoreDev01InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetDcmawAsyncAccessTokenFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, dev01, accountId ]

  GetDcmawAsyncAccessTokenFunctionCoreDev02InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetDcmawAsyncAccessTokenFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, dev02, accountId ]

  GetDcmawAsyncAccessTokenFunctionCoreBuildInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetDcmawAsyncAccessTokenFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, build, accountId ]

  ManagementEnqueueVcFunctionCoreDev01InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ManagementEnqueueVcFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, dev01, accountId ]

  ManagementEnqueueVcFunctionCoreDev02InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ManagementEnqueueVcFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, dev02, accountId ]

  ManagementEnqueueVcFunctionCoreBuildInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ManagementEnqueueVcFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, build, accountId ]

  ManagementCleanupSessionFunctionCoreDev01InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ManagementCleanupSessionFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, dev01, accountId ]

  ManagementCleanupSessionFunctionCoreDev02InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ManagementCleanupSessionFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, dev02, accountId ]

  ManagementCleanupSessionFunctionCoreBuildInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ManagementCleanupSessionFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, build, accountId ]

  GetDcmawAsyncVcFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    # checkov:skip=CKV_AWS_158: No need for customer managed keys for short lived logs
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/getDcmawAsyncVc-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  GetDcmawAsyncAccessTokenFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/getDcmawAsyncAccessToken-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  ManagementEnqueueVcFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/ManagementEnqueueVc-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  ManagementCleanupSessionFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/ManagementCleanupSession-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  ManagementEnqueueErrorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/ManagementEnqueueError-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  DcmawAsyncLambdaSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        DCMAW Async Lambdas Security Group
      SecurityGroupIngress:
        - CidrIp:
            Fn::ImportValue: !Sub ${VpcStackName}-VpcCidr
          Description: Allow ingress traffic from vpc cidr to port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId

  # kms key for logging
  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  # ssl cert
  DcmawAsyncStubSSLCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If
        - IsNonProd
        - !Sub "dcmaw-async.${Environment}.stubs.account.gov.uk"
        - dcmaw-async.stubs.account.gov.uk
      DomainValidationOptions:
        - DomainName: !If
            - IsNonProd
            - !Sub "dcmaw-async.${Environment}.stubs.account.gov.uk"
            - dcmaw-async.stubs.account.gov.uk
          HostedZoneId: !If
            - IsNonProd
            - !ImportValue BuildPublicHostedZoneId
            - !ImportValue RootPublicHostedZoneId
      ValidationMethod: DNS

    # api domain entries / mapping
  DcmawAsyncStubRestApiDomain:
    Type: AWS::ApiGateway::DomainName
    # checkov:skip=CKV_AWS_120: doing it later
    Properties:
      DomainName: !If
        - IsNonProd
        - !Sub "dcmaw-async.${Environment}.stubs.account.gov.uk"
        - dcmaw-async.stubs.account.gov.uk
      RegionalCertificateArn: !Ref DcmawAsyncStubSSLCert
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

  DcmawAsyncStubRestApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    # checkov:skip=CKV_AWS_120: doing it later
    Properties:
      DomainName: !If
        - IsNonProd
        - !Sub "dcmaw-async.${Environment}.stubs.account.gov.uk"
        - dcmaw-async.stubs.account.gov.uk
      RestApiId: !Ref RestApiGateway
      Stage: !Ref RestApiGateway.Stage
    DependsOn:
      - DcmawAsyncStubRestApiDomain
      - RestApiGateway

  # dns record
  DcmawAsyncStubDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      Name: !If
        - IsNonProd
        - !Sub "dcmaw-async.${Environment}.stubs.account.gov.uk"
        - dcmaw-async.stubs.account.gov.uk
      HostedZoneId: !If
        - IsNonProd
        - !ImportValue BuildPublicHostedZoneId
        - !ImportValue RootPublicHostedZoneId
      AliasTarget:
        DNSName: !GetAtt DcmawAsyncStubRestApiDomain.RegionalDomainName
        HostedZoneId: !GetAtt DcmawAsyncStubRestApiDomain.RegionalHostedZoneId

  RestApiGateway:
    Type: AWS::Serverless::Api
    DependsOn:
      - GetDcmawAsyncVcFunction
      - GetDcmawAsyncAccessTokenFunction
    Properties:
      # checkov:skip=CKV_AWS_120: We are not implementing API Gateway caching at the time.
      Name: !Sub DCMAW Async API Gateway ${Environment}
      StageName: !Sub ${Environment}
      TracingEnabled: true
      DefinitionBody:
        openapi: "3.0.3" # workaround to get `sam validate` to work
        paths: # workaround to get `sam validate` to work
          /foo:
            options: {} # workaround to get `sam validate` to work
        'Fn::Transform':
          Name: "AWS::Include"
          Parameters:
            Location: "../openAPI/dcmaw-async-external.yaml"
      Auth:
        ApiKeyRequired: false #pragma: allowlist secret
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: "DCMAW Async Usage Plan"
      AccessLogSetting:
        DestinationArn: !GetAtt RestApiLogGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }

  RestApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/dcmawAsyncRestApi-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  DcmawAsyncStubUserStateTable:
    Type: AWS::DynamoDB::Table
    # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
    Properties:
      TableName: !Sub "dcmaw-async-stub-user-state-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "userId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userId"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DynamoDBKmsKey.Arn

  # kms key for DynamoDB
  DynamoDBKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: "dynamodb.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              StringEquals:
                "kms:CallerAccount": !Sub "${AWS::AccountId}"
                "kms:ViaService":
                  - "dynamodb.amazonaws.com"
                  - !Sub "lambda.${AWS::Region}.amazonaws.com"

Outputs:
  RestApiGatewayID:
    Description: DCMAW Async API Gateway ID
    Export:
      Name: !Sub "DcmawAsyncRestApiGatewayID-${Environment}"
    Value: !Ref RestApiGateway
