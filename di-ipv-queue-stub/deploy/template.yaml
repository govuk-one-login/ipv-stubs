AWSTemplateFormatVersion: "2010-09-09"

Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Timeout: 30

Description: >-
  This creates the lambda function to process stub queue events

Parameters:
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: ""
  Environment:
    Description: The name of the environment to deploy to.
    Type: String
    AllowedPattern: ((production)|(build)|(dev.*))

Conditions:

  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  IsDevelopment: !Not
    - !Or
      - !Equals [ !Ref Environment, "build"]
      - !Equals [ !Ref Environment, "production"]
  IsProduction: !Equals [ !Ref Environment, production ]
  IsNonProd: !Not
    - !Or
      - !Condition IsDevelopment
      - !Condition IsProduction

Resources:

  # ssl cert
  QueueStubSSLCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If
        - IsNonProd
        - !Sub "queue.${Environment}.stubs.account.gov.uk"
        - queue.stubs.account.gov.uk
      DomainValidationOptions:
        - DomainName: !If
            - IsNonProd
            - !Sub "queue.${Environment}.stubs.account.gov.uk"
            - queue.stubs.account.gov.uk
          HostedZoneId: !If
            - IsNonProd
            - !ImportValue BuildPublicHostedZoneId
            - !ImportValue RootPublicHostedZoneId
      ValidationMethod: DNS

  EnqueueEventLambda:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    Properties:
      CodeUri: "../enqueue-event/src/handlers"
      Handler: enqueueEvent.handler
      Runtime: nodejs20.x
      Architectures:
        - arm64
      KmsKeyArn: !GetAtt LambdaKmsKey.Arn
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      Environment:
        Variables:
          QUEUE_KMS_KEY_ID: "alias/sqs/QueuesKmsKey"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId:
              Ref: EnqueueEventApi
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt QueueStubLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
        - Statement:
            - Sid: AllowSQS
              Effect: Allow
              Action:
                - "sqs:SendMessage"
                - "sqs:ReceiveMessage"
                - "sqs:DeleteMessage"
                - "sqs:GetQueueAttributes"
                - "sqs:GetQueueUrl"
                - "sqs:CreateQueue"
                - "sqs:AddPermission"
              Resource: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:stubQueue_*
        - Statement:
            - Sid: AllowKMS
              Effect: Allow
              Action:
                - "kms:Decrypt"
                - "kms:GenerateDataKey*"
                - "kms:DescribeKey"
              Resource:
                - !Sub "arn:aws:kms:eu-west-2:${AWS::AccountId}:key/*"
              Condition:
                "ForAnyValue:StringLike":
                  "kms:ResourceAliases":
                    - "alias/sqs/QueuesKmsKey"
    Metadata:
      # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - enqueueEvent.ts

  DequeueEventLambda:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    Properties:
      CodeUri: "../enqueue-event/src/handlers"
      Handler: dequeueEvent.handler
      Runtime: nodejs20.x
      Architectures:
        - arm64
      KmsKeyArn: !GetAtt LambdaKmsKey.Arn
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      Environment:
        Variables:
          QUEUE_KMS_KEY_ID: "alias/sqs/QueuesKmsKey"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /queues/{queueName}
            Method: get
            RestApiId:
              Ref: EnqueueEventApi
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt QueueStubLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
        - Statement:
            - Sid: AllowSQS
              Effect: Allow
              Action:
                - "sqs:SendMessage"
                - "sqs:ReceiveMessage"
                - "sqs:DeleteMessage"
                - "sqs:GetQueueAttributes"
                - "sqs:GetQueueUrl"
                - "sqs:CreateQueue"
                - "sqs:AddPermission"
              Resource: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:stubQueue_*
        - Statement:
            - Sid: AllowKMS
              Effect: Allow
              Action:
                - "kms:Decrypt"
                - "kms:GenerateDataKey*"
                - "kms:DescribeKey"
              Resource:
                - !Sub "arn:aws:kms:eu-west-2:${AWS::AccountId}:key/*"
              Condition:
                "ForAnyValue:StringLike":
                  "kms:ResourceAliases":
                    - "alias/sqs/QueuesKmsKey"
    Metadata:
      # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - dequeueEvent.ts

  QueueStubLambdaSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Queue stub Lambda Security Group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow egress HTTPS traffic to vpc cidr from port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      SecurityGroupIngress:
        - CidrIp:
            Fn::ImportValue: !Sub ${VpcStackName}-VpcCidr
          Description: Allow ingress traffic from vpc cidr to port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId

  # KMS key for lambda variable encryption
  LambdaKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  # KMS key for Queue encryption
  QueuesKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              AWS:
                - "arn:aws:iam::130355686670:root" # Dev01 account id
                - "arn:aws:iam::175872367215:root" # Dev02 account id
                - "arn:aws:iam::457601271792:root" # Build account id
                - "arn:aws:iam::335257547869:root" # Staging account id
            Action:
              - "kms:Decrypt"
            Resource: "*"

  # Alias for QueuesKmsKey
  QueuesKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: "alias/sqs/QueuesKmsKey"
      TargetKeyId: !Ref QueuesKmsKey

  # Shared dead-letter queue for all stub queues
  F2FDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "stubQueue_F2FDLQ"
      KmsMasterKeyId: !Ref QueuesKmsKey
      RedriveAllowPolicy:
        redrivePermission: allowAll

  EnqueueEventApi:
    Type: AWS::Serverless::Api
    # checkov:skip=CKV_AWS_120: We are not implementing API Gateway caching at the time.
    # checkov:skip=CKV_AWS_73: Don't need x-ray
    # checkov:skip=CKV_AWS_76: Don't need logging right now
    Properties:
      CacheClusterEnabled: False
      StageName: prod
      Domain:
        CertificateArn: !Ref QueueStubSSLCert
        DomainName: !If
          - IsNonProd
          - !Sub "queue.${Environment}.stubs.account.gov.uk"
          - queue.stubs.account.gov.uk
        EndpointConfiguration: REGIONAL
        SecurityPolicy: TLS_1_2
        Route53:
          HostedZoneId: !If
          - IsNonProd
          - !ImportValue BuildPublicHostedZoneId
          - !ImportValue RootPublicHostedZoneId
      ApiKeySourceType: HEADER #pragma: allowlist secret
      Auth:
        ApiKeyRequired: true #pragma: allowlist secret
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: "Queue Stub Usage Plan"

  CleanQueuesLambda:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    Properties:
      CodeUri: "../enqueue-event/src/handlers"
      Handler: cleanQueues.handler
      Runtime: nodejs20.x
      Architectures:
        - arm64
      KmsKeyArn: !GetAtt LambdaKmsKey.Arn
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            # run 3am every day
            Schedule: cron(0 3 * * ? *)
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt QueueStubLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
        - Statement:
            - Sid: AllowSQS
              Effect: Allow
              Action:
                - "sqs:ListQueues"
                - "sqs:DeleteQueue"
              Resource: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:stubQueue_*
    Metadata:
      # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - cleanQueues.ts

Outputs:
  ApiGatewayUrl:
    Description: The API URL to post the event data
    Value: !Join
    - ''
    - - "https://"
      - !If
        - IsNonProd
        - !Sub "queue.${Environment}.stubs.account.gov.uk"
        - queue.stubs.account.gov.uk
