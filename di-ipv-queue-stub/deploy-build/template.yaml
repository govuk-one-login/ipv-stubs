AWSTemplateFormatVersion: "2010-09-09"

Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Timeout: 30

Description: >-
  This creates the lambda function to update environment vars in the stubs ECS task definitions when the
  corresponding parameter is changed.

Parameters:
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"

Conditions:

  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Resources:
  # lambda to update ECS defn
  EnqueueEventLambda:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions

    Properties:
      CodeUri: "../enqueue-event/src/handlers"
      Handler: enqueueEvent.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt EnqueueEventDLQ.Arn
      KmsKeyArn: !GetAtt LambdaKmsKey.Arn
      ReservedConcurrentExecutions: 1
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue

      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId:
              Ref: EnqueueEventApi
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt EnqueueEventLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
        - Statement:
            - Sid: AllowSQS
              Effect: Allow
              Action:
                - "sqs:SendMessage"
              Resource: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:queue/*

    Metadata:
      # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        External:
          - "@aws-sdk/client-sqs"
        EntryPoints:
          - enqueueEvents.ts

  EnqueueEventLambdaSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        EnqueueEvent Lambda Security Group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow egress HTTPS traffic to vpc cidr from port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      SecurityGroupIngress:
        - CidrIp:
            Fn::ImportValue: !Sub ${VpcStackName}-VpcCidr
          Description: Allow ingress traffic from vpc cidr to port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId

  # kms key for lambda
  LambdaKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  # kms key for Queues
  QueuesKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              AWS: "arn:aws:iam::457601271792:root" # Build account id
            Action:
              - "kms:Decrypt"
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "lambda.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:GenerateDataKey*"
            Resource: !GetAtt EnqueueEventLambda.Arn

  #lambda dlq
  EnqueueEventDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: EnqueueEventLambdaDLQ
      MessageRetentionPeriod: 1209600
      RedriveAllowPolicy: |
        {  "redrivePermission"  : "allowAll" }
      KmsMasterKeyId: alias/aws/sqs
  #Pre lambda dlq
  PreEnqueueEventDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: PreEnqueueEventLambdaDLQ
      MessageRetentionPeriod: 1209600
      RedriveAllowPolicy: |
        {  "redrivePermission"  : "allowAll" }
      KmsMasterKeyId: alias/aws/sqs

  #F2F VC message queue
  F2FMessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: F2FMessageQueue
      KmsMasterKeyId: !Ref QueuesKmsKey

  F2FMessageQueuePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: "F2FMessageQueuePolicy"
      PolicyDocument:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "sqs:ReadMessage"
              Resource:
                - !GetAtt F2FMessageQueue.Arn
              Condition:
                StringEquals:
                  "aws:PrincipalAccount":
                    - "457601271792" # Build account id
                    #could also put in the arn of the build lambda here...

  EnqueueEventApi:
    Type: AWS::Serverless::Api
    # checkov:skip=CKV_AWS_120: We are not implementing API Gateway caching at the time.
    # checkov:skip=CKV_AWS_73: Don't need x-ray
    # checkov:skip=CKV_AWS_76: Don't need logging right now
    Properties:
      CacheClusterEnabled: False
      StageName: prod





