AWSTemplateFormatVersion: "2010-09-09"

Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Timeout: 30

Description: >-
  This creates the lambda function to update environment vars in the stubs ECS task definitions when the
  corresponding parameter is changed.

Parameters:
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: ""

Conditions:

  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"

Resources:
  # lambda to update ECS defn
  EnqueueEventLambda:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions

    Properties:
      CodeUri: "../enqueue-event/src/handlers"
      Handler: enqueueEvent.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt EnqueueEventDLQ.Arn
      KmsKeyArn: !GetAtt LambdaKmsKey.Arn
      ReservedConcurrentExecutions: 1
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      Environment:
        Variables:
          QUEUE_KMS_KEY_ID: "alias/sqs/QueuesKmsKey"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId:
              Ref: EnqueueEventApi
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt EnqueueEventLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - Statement:
            - Sid: EnforceStayinSpecificVpc
              Effect: Allow
              Action:
                - 'lambda:CreateFunction'
                - 'lambda:UpdateFunctionConfiguration'
              Resource:
                - "*"
              Condition:
                StringEquals:
                  "lambda:VpcIds":
                    - Fn::ImportValue: !Sub ${VpcStackName}-VpcId
        - Statement:
            - Sid: AllowSQS
              Effect: Allow
              Action:
                - "sqs:SendMessage"
                - "sqs:ReceiveMessage"
                - "sqs:DeleteMessage"
                - "sqs:GetQueueAttributes"
                - "sqs:GetQueueUrl"
                - "sqs:CreateQueue"
                - "sqs:AddPermission"
              Resource: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:stubQueue_*
        - Statement:
            - Sid: AllowKMS
              Effect: Allow
              Action:
                - "kms:Decrypt"
                - "kms:GenerateDataKey*"
                - "kms:DescribeKey"
              Resource:
                - !Sub "arn:aws:kms:eu-west-2:${AWS::AccountId}:key/*"
              Condition:
                "ForAnyValue:StringLike":
                  "kms:ResourceAliases":
                    - "alias/sqs/QueuesKmsKey"

    Metadata:
      # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        External:
          - "@aws-sdk/client-sqs"
        EntryPoints:
          - enqueueEvent.ts

  EnqueueEventLambdaSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        EnqueueEvent Lambda Security Group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow egress HTTPS traffic to vpc cidr from port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      SecurityGroupIngress:
        - CidrIp:
            Fn::ImportValue: !Sub ${VpcStackName}-VpcCidr
          Description: Allow ingress traffic from vpc cidr to port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId

  # kms key for lambda
  LambdaKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  # kms key for Queues
  QueuesKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              AWS:
                - "arn:aws:iam::457601271792:root" # Build account id
                - "arn:aws:iam::130355686670:root" # OldDev account id
                - "arn:aws:iam::175872367215:root" # Dev account id
            Action:
              - "kms:Decrypt"
            Resource: "*"

  #QueuesKmsKey Alias
  QueuesKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: "alias/sqs/QueuesKmsKey"
      TargetKeyId: !Ref QueuesKmsKey

  #lambda dlq
  EnqueueEventDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: EnqueueEventLambdaDLQ
      MessageRetentionPeriod: 1209600
      RedriveAllowPolicy: |
        {  "redrivePermission"  : "allowAll" }
      KmsMasterKeyId: alias/aws/sqs
  #Pre lambda dlq
  PreEnqueueEventDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: PreEnqueueEventLambdaDLQ
      MessageRetentionPeriod: 1209600
      RedriveAllowPolicy: |
        {  "redrivePermission"  : "allowAll" }
      KmsMasterKeyId: alias/aws/sqs

  #F2F VC message queue
  F2FMessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "stubQueue_F2FMessageQueue"
      KmsMasterKeyId: !Ref QueuesKmsKey

  MessageQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref F2FMessageQueue
      PolicyDocument:
        Statement:
          - Sid: "AllowReadByOtherAccount"
            Effect: Allow
            Action:
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
              - "sqs:GetQueueAttributes"
            Resource: !GetAtt F2FMessageQueue.Arn
            Principal:
              AWS:
                - "arn:aws:iam::457601271792:root" # Build account id
                - "arn:aws:iam::130355686670:root" # OldDev account id
                - "arn:aws:iam::175872367215:root" # Dev account id
         #- Sid: "AllowKeyAccess"
         #  Effect: Allow
         #  Action:
         #    - "kms:Encrypt"
         #    - "kms:GenerateDataKey"
         #  Resource: !Ref QueuesKmsKey
         #  Principle:
         #    AWS:
         #      - !Sub "arn:aws:iam::${AWS::AccountId}:root"

  EnqueueEventApi:
    Type: AWS::Serverless::Api
    # checkov:skip=CKV_AWS_120: We are not implementing API Gateway caching at the time.
    # checkov:skip=CKV_AWS_73: Don't need x-ray
    # checkov:skip=CKV_AWS_76: Don't need logging right now
    Properties:
      CacheClusterEnabled: False
      StageName: prod

Outputs:
  ApiGatewayUrl:
    Description: The API URL to post the event data
    Value: !Join
    - ''
    - - "https://"
      - !GetAtt EnqueueEventApi.RootResourceId
      - ".execute-api.eu-west-2.amazonaws.com/prod"




