AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  This creates the necessary components to deploy IPV Core Stub onto ECS
  Fargate within the dev platform VPC and private subnets (provided as parameters).

Parameters:
  Environment:
    Description: The name of the environment to deploy to.
    Type: String
    AllowedPattern: ((production)|(build)|(dev.*))
  ImageTag:
    Description: The tag of core-stub image to deploy in the task definition.
    Type: String
    Default: "none"
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
    # disabling these as not being used - leaving these in as it may be useful for any/other core-stubs
    #  CommonCoreStubAppTitle:
    #    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    #    Type: AWS::SSM::Parameter::Value<String>
    #    Default: "/stubs/core/common/env/CORE_STUB_APP_TITLE"
    #  CommonCoreStubClientId:
    #    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    #    Type: AWS::SSM::Parameter::Value<String>
    #    Default: "/stubs/core/common/env/CORE_STUB_CLIENT_ID"
    #  CommonCoreStubConfigAgedDob:
    #    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    #    Type: AWS::SSM::Parameter::Value<String>
    #    Default: "/stubs/core/common/env/CORE_STUB_CONFIG_AGED_DOB"
    #  CommonCoreStubConfigFile:
    #    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    #    Type: AWS::SSM::Parameter::Value<String>
    #    Default: "/stubs/core/common/env/CORE_STUB_CONFIG_FILE"
    #  CommonCoreStubPort:
    #    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    #    Type: AWS::SSM::Parameter::Value<String>
    #    Default: "/stubs/core/common/env/CORE_STUB_PORT"
    #  CommonCoreStubRedirectUrl:
    #    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    #    Type: AWS::SSM::Parameter::Value<String>
    #    Default: "/stubs/core/common/env/CORE_STUB_REDIRECT_URL"
    #  CommonJavaHome:
    #    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    #    Type: AWS::SSM::Parameter::Value<String>
    #    Default: "/stubs/core/common/env/JAVA_HOME"
    #  CommonJavaOpts:
    #    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    #    Type: AWS::SSM::Parameter::Value<String>
    #    Default: "/stubs/core/common/env/JAVA_OPTS"
    #  CommonJbpConfigOpenJdkJre:
    #    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    #    Type: AWS::SSM::Parameter::Value<String>
    #    Default: "/stubs/core/common/env/JBP_CONFIG_OPEN_JDK_JRE"
  CoreStubClientId:
    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/stubs/core/passport/env/CORE_STUB_CLIENT_ID"
  CoreStubConfigFile:
    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/stubs/core/passport/env/CORE_STUB_CONFIG_FILE"
  CoreStubJwtAudExperianCriUri:
    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/stubs/core/passport/env/CORE_STUB_JWT_AUD_EXPERIAN_CRI_URI"
  CoreStubJwtIssCriUri:
    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/stubs/core/passport/env/CORE_STUB_JWT_ISS_CRI_URI"
  CoreStubKeystoreAlias:
    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/stubs/core/passport/env/CORE_STUB_KEYSTORE_ALIAS"
  CoreStubKeystoreBase64:
    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/stubs/core/passport/env/CORE_STUB_KEYSTORE_BASE64"
  CoreStubKeystorePassword:
    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/stubs/core/passport/env/CORE_STUB_KEYSTORE_PASSWORD"
  CoreStubPort:
    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/stubs/core/passport/env/CORE_STUB_PORT"
  CoreStubRedirectUrl:
    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/stubs/core/passport/env/CORE_STUB_REDIRECT_URL"
  CoreStubSigningPrivateKeyJwkBase64:
    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/stubs/core/passport/env/CORE_STUB_SIGNING_PRIVATE_KEY_JWK_BASE64"
  CoreStubUserDataPath:
    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/stubs/core/passport/env/CORE_STUB_USER_DATA_PATH"
  JavaHome:
    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/stubs/core/passport/env/JAVA_HOME"
  JavaOpts:
    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/stubs/core/passport/env/JAVA_OPTS"
  JbpConfigOpenJdkJre:
    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/stubs/core/passport/env/JBP_CONFIG_OPEN_JDK_JRE"
  MaxJarTtlMins:
    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/stubs/core/passport/env/MAX_JAR_TTL_MINS"
  PassportPrivateApiKey:
    Description: "Environment Variables for ECS - Retrieved from SSM Parameter Store"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/stubs/core/passport/env/PASSPORT_PRIVATE_API_KEY"

Conditions:
  IsDevelopment: !Not
    - !Or
      - !Equals [ !Ref Environment, "build"]
      - !Equals [ !Ref Environment, "production"]
  IsNotDevelopment: !Not [ !Condition IsDevelopment ]
  IsProduction: !Equals [ !Ref Environment, production ]
  IsNonProd: !Not
    - !Or
      - !Condition IsDevelopment
      - !Condition IsProduction

  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

# Mapping using aws account id - keeps things simple
# if this is built out differently.
Mappings:
  EnvironmentConfiguration:
    "130355686670": # Development
      fargateCPUsize: "256"
      fargateRAMsize: "512"
      desiredTaskCount: 1
    "826978934233": #Stubs Build
      fargateCPUsize: "256"
      fargateRAMsize: "512"
      desiredTaskCount: 1

Resources:
  CoreDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      TTL: 900
      Name: !If
        - IsNonProd
        - !Sub "core.${Environment}.stubs.account.gov.uk"
        - core.stubs.account.gov.uk
      HostedZoneId: !If
        - IsNonProd
        - !ImportValue BuildPublicHostedZoneId
        - !ImportValue RootPublicHostedZoneId

  CorePassportDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      TTL: 900
      Name: !If
        - IsNonProd
        - !Sub "passport-core.${Environment}.stubs.account.gov.uk"
        - passport-core.stubs.account.gov.uk
      HostedZoneId: !If
        - IsNonProd
        - !ImportValue BuildPublicHostedZoneId
        - !ImportValue RootPublicHostedZoneId

  CoreStubSSLCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If
        - IsNonProd
        - !Sub "core.${Environment}.stubs.account.gov.uk"
        - core.stubs.account.gov.uk
      SubjectAlternativeNames: 
        - !If
          - IsNonProd
          - !Sub "passport-core.${Environment}.stubs.account.gov.uk"
          - passport-core.stubs.account.gov.uk
      DomainValidationOptions:
        - DomainName: !If
            - IsNonProd
            - !Sub "passport-core.${Environment}.stubs.account.gov.uk"
            - passport-core.stubs.account.gov.uk
          HostedZoneId: !If
            - IsNonProd
            - !ImportValue BuildPublicHostedZoneId
            - !ImportValue RootPublicHostedZoneId
        - DomainName: !If
            - IsNonProd
            - !Sub "core.${Environment}.stubs.account.gov.uk"
            - core.stubs.account.gov.uk
          HostedZoneId: !If
            - IsNonProd
            - !ImportValue BuildPublicHostedZoneId
            - !ImportValue RootPublicHostedZoneId
      ValidationMethod: DNS

  # Security Groups for the ECS service and load balancer
  LoadBalancerSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Core Stub LoadBalancer Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow internet ingress to port 443
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow egress from load balancer out to internet port 443
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId

  LoadBalancerSGEgressToECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt LoadBalancerSG.GroupId
      Description: >-
        Egress between the Core Stub load balancer and
        the core Stub ECS security group
      DestinationSecurityGroupId: !GetAtt CoreStubECSSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 8085
      ToPort: 8085

  CoreStubECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Core Stub ECS Security Group outbound permissions ruleset
      SecurityGroupEgress:
        - DestinationSecurityGroupId: !If
            - IsNotDevelopment
            - Fn::ImportValue:  !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
            - !ImportValue InterfaceVpcEndpointSecurityGroupId
          Description: Allow outbound traffic to AWS Services vpc endpoint security group
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp:
            Fn::ImportValue: !Sub ${VpcStackName}-VpcCidr
          Description: Allow outbound traffic from vpc cidr to port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      SecurityGroupIngress:
        - CidrIp:
            Fn::ImportValue: !Sub ${VpcStackName}-VpcCidr
          Description: Allow inbound traffic from vpc cidr to port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId

  CoreStubECSSecurityGroupIngressFromLoadBalancer:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: tcp
      Description: >-
        Core Stub ECS permits inbound from the Core Stub
        load balancer.
      FromPort: 8085
      ToPort: 8085
      GroupId: !GetAtt CoreStubECSSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId

  # Private Application Load Balancer
  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt LoadBalancerSG.GroupId
      Subnets:
        - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
        - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
      Type: application
      #checkov:skip=CKV_AWS_91:ALB access logging is disabled in developer environments to make them easier to manage.
      LoadBalancerAttributes:
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
        - !If
          - IsNotDevelopment
          - Key: access_logs.s3.enabled
            Value: true
          - !Ref AWS::NoValue
        - !If
          - IsNotDevelopment
          - Key: access_logs.s3.bucket
            Value: !Sub "ipv-stubs-${Environment}-access-logs"
          - !Ref AWS::NoValue
        - !If
          - IsNotDevelopment
          - Key: access_logs.s3.prefix
            Value: !Sub core-stub-${Environment}
          - !Ref AWS::NoValue
        - !If
          - IsNotDevelopment
          - Key: deletion_protection.enabled
            Value: true
          - !Ref AWS::NoValue

    #  LoadBalancerListenerCertificate:
    #    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    #    Properties:
    #      Certificates:
    #        - !Ref CoreStubSSLCert
    #    ListenerArn: !Ref LoadBalancerListener

  LoadBalancerListenerTargetGroupECS:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: TRUE
      HealthCheckProtocol: HTTP
      HealthCheckPath: /healthcheck
      Matcher:
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      # checkov:skip=CKV_AWS_2:Certificate generation must be resolved before the listener can use HTTPS.
      # checkov:skip=CKV_AWS_103:The load balancer cannot use TLS v1.2 until HTTPS is enabled
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CoreStubSSLCert
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerListenerTargetGroupECS
          Type: forward

  # ECS cluster, service and task definition
  CoreStubCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  CoreStubService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref CoreStubCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      DesiredCount: !FindInMap
        - EnvironmentConfiguration
        - !Ref AWS::AccountId
        - desiredTaskCount
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 8085
          TargetGroupArn: !Ref LoadBalancerListenerTargetGroupECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt CoreStubECSSecurityGroup.GroupId
          Subnets:
            - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
            - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
      TaskDefinition: !Ref ECSServiceTaskDefinition
    DependsOn:
      - LoadBalancerListener

  CoreStubAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 3
      MinCapacity: 1
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref CoreStubCluster
          - !GetAtt CoreStubService.Name
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  CoreStubAutoScalingPolicy:
    DependsOn: CoreStubAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CoreStubAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref CoreStubCluster
          - !GetAtt CoreStubService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70
        ScaleInCooldown: 300
        ScaleOutCooldown: 60

  ECSAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${AWS::StackName}-CoreStub-ECS
      RetentionInDays: 14
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  ECSServiceTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !If [
              IsNotDevelopment,
              CONTAINER-IMAGE-PLACEHOLDER,
              !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/core-stub-development:${ImageTag}",
            ] # Uses build account and ECR when not in development.
          Name: app
          Environment:
          - Name: CORE_STUB_CLIENT_ID
            Value: !Ref CoreStubClientId
          - Name: CORE_STUB_CONFIG_FILE
            Value: !Ref CoreStubConfigFile
          - Name: CORE_STUB_JWT_AUD_EXPERIAN_CRI_URI
            Value: !Ref CoreStubJwtAudExperianCriUri
          - Name: CORE_STUB_JWT_ISS_CRI_URI
            Value: !Ref CoreStubJwtIssCriUri
          - Name: CORE_STUB_KEYSTORE_ALIAS
            Value: !Ref CoreStubKeystoreAlias
          - Name: CORE_STUB_KEYSTORE_BASE64
            Value: !Ref CoreStubKeystoreBase64
          - Name: CORE_STUB_KEYSTORE_PASSWORD
            Value: !Ref CoreStubKeystorePassword
          - Name: CORE_STUB_PORT
            Value: !Ref CoreStubPort
          - Name: CORE_STUB_REDIRECT_URL
            Value: !Ref CoreStubRedirectUrl
          - Name: CORE_STUB_SIGNING_PRIVATE_KEY_JWK_BASE64
            Value: !Ref CoreStubSigningPrivateKeyJwkBase64
          - Name: CORE_STUB_USER_DATA_PATH
            Value: !Ref CoreStubUserDataPath
          - Name: JAVA_HOME
            Value: !Ref JavaHome
          - Name: JAVA_OPTS
            Value: !Ref JavaOpts
          - Name: JBP_CONFIG_OPEN_JDK_JRE
            Value: !Ref JbpConfigOpenJdkJre
          - Name: MAX_JAR_TTL_MINS
            Value: !Ref MaxJarTtlMins
          - Name: PASSPORT_PRIVATE_API_KEY
            Value: !Ref PassportPrivateApiKey
          PortMappings:
            - ContainerPort: 8085
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSAccessLogsGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: !Sub core-stub-${Environment}
      Cpu: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, fargateCPUsize ]
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Memory: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, fargateRAMsize ]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt ECSTaskRole.Arn

  ECSTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: PullCoreStubImage
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetAuthorizationToken"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !GetAtt "ECSAccessLogsGroup.Arn"
                  - !Sub "${ECSAccessLogsGroup.Arn}:*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  ECSTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

Outputs:
  CoreStubEnvironment:
    Description: Core Stub Environment
    Value: !Ref Environment
