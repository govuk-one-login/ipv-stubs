openapi: 3.0.3
info:
  title: "Encrypted VC Storage (EVCS) Stub API"
  description: "The external api presented by EVCS Stub for use by services"
  version: "1.0.0"
paths:
  /healthcheck:
    get:
      description: "returns a 200 for Route53 health checks to use"
      responses:
        200:
          description: "A healthcheck response"
          content:
            application/json:
              schema:
                type: "object"
      x-amazon-apigateway-integration:
        type: "MOCK"
        requestTemplates:
          application/json: "{\"statusCode\":200}"
        responses:
          200:
            statusCode: 200
            responseTemplates:
              application/json: "{\"healthcheck\": \"ok\"}"

  /vcs/{userId}:
    post:
      description: Save multiple VCs for a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: urn:uuid:d1823066-2137-4380-b0ba-4b61947e08e6
          description: A valid uuid as user Id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostUserVCRequestBody"
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: string
                    description: The SQS message ID.
                    example: "bd8359d9-d559-47dd-9467-2a31e88a9e2d"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/ServerError'
      x-amazon-apigateway-request-validator: ALL
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EvcsCreateUserVCsFunction.Arn}:live/invocations
        passthroughBehavior: "WHEN_NO_TEMPLATES"
        responses:
          202:
            statusCode: 202
            responseTemplates:
              application/json: '{"result": "success"}'
    patch:
      description: Update multiple VCs' state and metadata for a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: urn:uuid:d1823066-2137-4380-b0ba-4b61947e08e6
          description: A valid uuid as user Id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchUserVCRequestBody"
      responses:
        204:
          description: "Success"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/ServerError'
      x-amazon-apigateway-request-validator: ALL
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EvcsUpdateUserVCsFunction.Arn}:live/invocations
        passthroughBehavior: "WHEN_NO_TEMPLATES"
        responses:
          204:
            statusCode: 204
            responseTemplates:
              application/json: '{"result": "success"}'
    get:
      description: "Returns a list of User Verifiable Credentials"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: urn:uuid:d1823066-2137-4380-b0ba-4b61947e08e6
          description: A valid uuid as user Id.
        - name: state
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/VCStates"
            example: CURRENT, PENDING_RETURN or ALL
          description: A valid comma separated state value or ALL to retrive VCs in all available states.
        - name: afterKey
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/VCSignature"
            example: qf0yp7B1an7cEwBui7GFCF9NNCJhHxTZuMSh5ehZPmZ4J527okK3pRgdSpWX8DlBFiZS-rXA496egfcfI-neGQ
          description: A VC signature to retrive next set of VCs, its used for pagination.
      responses:
        200:
          description: "The list of Verifiable Credentials"
          content:
            application/json:
              schema:
                type: object
                properties:
                  vcs:
                    type: array
                    description: List of user VCs.
                  afterKey:
                    type: string
                    description: Indicates that the user has more VCs than the ones returned in the response. If full set of VCS is required subsequent calls should be made with this value as a query string parameter, until this value is not returned in the response.
                    example: qf0yp7B1an7cEwBui7GFCF9NNCJhHxTZuMSh5ehZPmZ4J527okK3pRgdSpWX8DlBFiZS-rXA496egfcfI-neGQ
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/ServerError'
      x-amazon-apigateway-request-validator: ALL
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EvcsGetUserVCsFunction.Arn}:live/invocations
        passthroughBehavior: "when_no_match"
        responses:
          200:
            statusCode: 200
            responseTemplates:
              application/json: '{"result": "success"}'

  /identity:
    post:
      description: "Saves the stored identity record for a given user into EVCS"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PersistStoredIdentity"
      responses:
        202:
          description: Stored identity record accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: string
                    description: The SQS message ID.
                    example: "bd8359d9-d559-47dd-9467-2a31e88a9e2d"
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/ServerError'
      x-amazon-apigateway-request-validator: ALL
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EvcsPostIdentityFunction.Arn}:live/invocations
        passthroughBehavior: "WHEN_NO_TEMPLATES"
        responses:
          202:
            statusCode: 202
            responseTemplates:
              application/json: '{"result": "success"}'

  /identity/invalidate:
    post:
      description: Set a User's SI document as invalid hence the SI document should no longer be used.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserIdRequestBody"
      responses:
        204:
          description: "Successfully invalidated user stored identity record"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/ServerError'
      x-amazon-apigateway-request-validator: ALL
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EvcsInvalidateStoredIdentityFunction.Arn}:live/invocations
        passthroughBehavior: "WHEN_NO_TEMPLATES"
        responses:
          204:
            statusCode: 204
            responseTemplates:
              application/json: '{"result": "success"}'

  /migration/{userId}:
    get:
      description: "Returns a list of user verifiable credentials"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: urn:uuid:d1823066-2137-4380-b0ba-4b61947e08e6
          description: A valid uuid as user Id.
        - name: state
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/VCStates"
            example: CURRENT, PENDING_RETURN or ALL
          description: A valid comma separated state value or ALL to retrieve VCs in all available states.
        - name: afterKey
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/VCSignature"
            example: qf0yp7B1an7cEwBui7GFCF9NNCJhHxTZuMSh5ehZPmZ4J527okK3pRgdSpWX8DlBFiZS-rXA496egfcfI-neGQ
          description: A VC signature to retrieve next set of VCs, its used for pagination.
      responses:
        200:
          description: "The list of Verifiable Credentials"
          content:
            application/json:
              schema:
                type: object
                properties:
                  vcs:
                    type: array
                    description: List of user VCs.
                  afterKey:
                    type: string
                    description: Indicates that the user has more VCs than the ones returned in the response. If full set of VCS is required subsequent calls should be made with this value as a query string parameter, until this value is not returned in the response.
                    example: qf0yp7B1an7cEwBui7GFCF9NNCJhHxTZuMSh5ehZPmZ4J527okK3pRgdSpWX8DlBFiZS-rXA496egfcfI-neGQ
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/ServerError'
      x-amazon-apigateway-request-validator: ALL
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EvcsGetUserVCsFunction.Arn}:live/invocations
        passthroughBehavior: "when_no_match"
        responses:
          200:
            statusCode: 200
            responseTemplates:
              application/json: '{"result": "success"}'

  /management/stored-identity/{userId}:
    get:
      description: Management endpoint to allow testing the stored identity object we store to EVCS
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Successful GET response for stored identity"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvcsManagementGetStoredIdentity"
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
      x-amazon-apigateway-request-validator: ALL
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EvcsManagementGetStoredIdentityFunction.Arn}:live/invocations
        passthroughBehavior: "when_no_match"
        responses:
          200:
            statusCode: 200
            responseTemplates:
              application/json: '{"result": "success"}'
    post:
      description: Saves a stored identity record for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                si:
                  $ref: "#/components/schemas/StoredIdentityDetails"
      responses:
        202:
          description: Stored identity record accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/ServerError'
      x-amazon-apigateway-request-validator: ALL
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EvcsManagementCreateStoredIdentityFunction.Arn}:live/invocations
        passthroughBehavior: "WHEN_NO_TEMPLATES"
        responses:
          202:
            statusCode: 202
            responseTemplates:
              application/json: '{"result": "success"}'
components:
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    PostUserVCRequestBody:
      description: Request body for EVCS post user VCs request
      type: array
      minItems: 1
      items:
        type: "object"
        additionalProperties: false
        properties:
          vc:
            $ref: "#/components/schemas/VC"
          state:
            $ref: "#/components/schemas/CreateStates"
          metadata:
            $ref: "#/components/schemas/VCMetadata"
          provenance:
            $ref: "#/components/schemas/VCProvenance"
        required:
          - vc
          - state
    PatchUserVCRequestBody:
      description: State and Metadata Array Schema to update Verifiable Credentials
      type: array
      minItems: 1
      maxItems: 100
      uniqueItems: true
      items:
        type: "object"
        additionalProperties: false
        properties:
          signature:
            $ref: "#/components/schemas/VCSignature"
          state:
            $ref: "#/components/schemas/UpdateStates"
          metadata:
            $ref: "#/components/schemas/VCMetadata"
        required:
          - signature
          - state
    UserIdRequestBody:
      description: Request body schema containing required userId property.
      type: object
      properties:
        userId:
          type: string
      required:
        - userId
    PersistStoredIdentity:
      description: The request body for the /identity POST endpoint to store a user's stored identity record
      allOf:
        - $ref: "#/components/schemas/UserIdRequestBody"
        - type: object
          properties:
            si:
              $ref: "#/components/schemas/StoredIdentityDetails"
          required:
            - si # TODO PYIC-8458: mark this as non-required when updating this endpoint with vcs list
    StoredIdentityDetails:
      type: object
      properties:
        jwt:
          $ref: "#/components/schemas/VC"
        vot:
          $ref: "#/components/schemas/VectorOfTrust"
        metadata:
          $ref: "#/components/schemas/VCMetadata"
      required:
        - jwt
        - vot
    EvcsManagementGetStoredIdentity:
      type: array
      items:
        type: object
        uniqueItems: true
        properties:
          response:
            type: object
            properties:
              userId:
                description: the user ID associated with the stored identity
                type: string
              recordType:
                $ref: "#/components/schemas/VCSignature"
              storedIdentity:
                $ref: "#/components/schemas/VC"
              isValid:
                description: Indicates the validity of the stored identity record.
                type: boolean
              levelOfConfidence:
                $ref: "#/components/schemas/VectorOfTrust"

    PersistVCsArray:
      description: An array of VCs to be persisted in EVCS with state and, optionally, metadata and provenance information.
      type: array
      minItems: 1
      uniqueItems: true
      items:
        type: object
        properties:
          vc:
            $ref: "#/components/schemas/VC"
          state:
            anyOf:
              - $ref: "#/components/schemas/CreateStates"
              - $ref: "#/components/schemas/UpdateStates"
          metadata:
            $ref: "#/components/schemas/VCMetadata"
          provenance:
            $ref: "#/components/schemas/VCProvenance"
        required:
          - vc
          - state
    VectorOfTrust:
      title: Vector of Trust
      description: |-
        The highest Level of Confidence that has been attained by the VC bundle.
        This is used to determine the type of SI that should be checked, either a GPG45 or an Operational Profile
        provided by another org.
      type: string
      default: P2
      example: P2
      enum:
        - P0     # gpg45 profile
        - P1     # gpg45 profile
        - P2     # gpg45 profile
        - P3     # gpg45 profile
        - P4     # gpg45 profile
        - PCL200 # hmrc op profile
        - PCL250 # hmrc op profile
    VC:
      title: Verifiable Credential (Signed JWT)
      description: A JWT formatted Verifiable Credential.
      type: "string"
      pattern: ^(?:[a-zA-Z0-9_\-\+\/=]*\.){2}[a-zA-Z0-9_\-\+\/=]*$
    VCMetadata:
      title: VC Metadata
      description: An schemaless object used for storing arbitrary information adjacent to an actual VC.
      type: "object"
      example:
        reason: abandoned due inactivity
        timestampMs: 1711721297123
        txmaEventId: 1a116fe7-2ff9-4f7c-940d-d55fa7d03d66
      additionalProperties: true
    VCSignature:
      title: Signature part of Verifiable Credential (Signed JWT)
      type: "string"
      pattern: ^[a-zA-Z0-9_\-\+\/=]*$
    CreateStates:
      type: string
      enum:
        - CURRENT
        - PENDING
        - PENDING_RETURN
        - VERIFICATION
    UpdateStates:
      type: string
      enum:
        - CURRENT
        - ABANDONED
        - PENDING_RETURN
        - HISTORIC
        - VERIFICATION_ARCHIVED
    VCStates:
      type: string
      enum:
        - CURRENT
        - PENDING
        - ABANDONED
        - PENDING_RETURN
        - VERIFICATION
        - HISTORIC
        - VERIFICATION_ARCHIVED
    VCProvenance:
      type: string
      description: Indicate the origin context when the VC is stored. If a value is not provided, a VC's Provenance will be assumed to be `ONLINE`.
      enum:
        - ONLINE
        - OFFLINE
        - EXTERNAL
        - MIGRATED
        - OTHER
    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message

x-amazon-apigateway-request-validators:
  ALL:
    validateRequestBody: true
    validateRequestParameters: true
    validateRequestHeaders: true