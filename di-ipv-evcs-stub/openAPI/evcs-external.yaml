openapi: 3.0.3
info:
  title: "EVCS Stub External"
  description: "The external api presented by EVCS Stub for use by services"
  version: "1.0.0"
paths:
  /healthcheck:
    get:
      description: "returns a 200 for Route53 health checks to use"
      responses:
        200:
          description: "A healthcheck response"
          content:
            application/json:
              schema:
                type: "object"
      x-amazon-apigateway-integration:
        type: "MOCK"
        requestTemplates:
          application/json: "{\"statusCode\":200}"
        responses:
          200:
            statusCode: 200
            responseTemplates:
              application/json: "{\"healthcheck\": \"ok\"}"

  /vcs/{userId}:
    post:
      description: Save multiple VCs for a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostUserVCRequestBody"
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                type: "object"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EvcsCreateUserVCsFunction.Arn}:live/invocations
        passthroughBehavior: "WHEN_NO_TEMPLATES"
        responses:
          default:
            statusCode: 202
            responseTemplates:
              application/json: '{"result": "success"}'
    patch:
      description: Update multiple VCs' state and metadata for a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchUserVCRequestBody"
      responses:
        204:
          description: "Accepted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                type: "object"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EvcsUpdateUserVCsFunction.Arn}:live/invocations
        passthroughBehavior: "WHEN_NO_TEMPLATES"
        responses:
          default:
            statusCode: 204
            responseTemplates:
              application/json: '{"result": "success"}'
    get:
      description: "Returns a list of User Verifiable Credentials"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: state
          in: query
          required: false
          schema:
            type: string
        - name: afterKey
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: "The list of Verifiable Credentials"
          content:
            application/json:
              schema:
                type: "object"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                type: "object"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EvcsGetUserVCsFunction.Arn}:live/invocations
        passthroughBehavior: "when_no_match"
        responses:
          default:
            statusCode: 200
            responseTemplates:
              application/json: '{"result": "success"}'
components:
  schemas:
    PostUserVCRequestBody:
      description: Request body for EVCS post user VCs request
      type: array
      minItems: 1
      items:
        type: "object"
        additionalProperties: false
        properties:
          vc:
            $ref: "#/components/schemas/VC"
          state:
            $ref: "#/components/schemas/CreateStates"
          metadata:
            $ref: "#/components/schemas/VCMetadata"
          provenance:
            $ref: "#/components/schemas/VCProvenance"
        required:
          - vc
          - state
    PatchUserVCRequestBody:
      description: State and Metadata Array Schema to update Verifiable Credentials
      type: array
      minItems: 1
      maxItems: 100
      uniqueItems: true
      items:
        type: "object"
        additionalProperties: false
        properties:
          signature:
            $ref: "#/components/schemas/VCSignature"
          state:
            $ref: "#/components/schemas/UpdateStates"
          metadata:
            $ref: "#/components/schemas/VCMetadata"
        required:
          - signature
          - state
    VC:
      type: "string"
      pattern: ^(?:[a-zA-Z0-9_\-\+\/=]*\.){2}[a-zA-Z0-9_\-\+\/=]*$
    VCMetadata:
      type: "object"
      additionalProperties: true
    VCSignature:
      type: "string"
      pattern: ^[a-zA-Z0-9_\-\+\/=]*$
    CreateStates:
      type: string
      enum:
        - CURRENT
        - PENDING
        - PENDING_RETURN
        - VERIFICATION
    UpdateStates:
      type: string
      enum:
        - CURRENT
        - ABANDONED
        - PENDING_RETURN
        - HISTORIC
        - VERIFICATION_ARCHIVED
    VCProvenance:
      type: string
      description: Indicate the origin context when the VC is stored. If a value is not provided, a VC's Provenance will be assumed to be `ONLINE`.
      enum:
        - ONLINE
        - OFFLINE
        - EXTERNAL
        - MIGRATED
        - OTHER
