AWSTemplateFormatVersion: "2010-09-09"

Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 30
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue

Description: >-
  This creates the infrastructure for EVCS stub .

Parameters:
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
  Environment:
    Description: The name of the environment to deploy to.
    Type: String
    AllowedPattern: ((production)|(build)|(dev.*))
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply when creating IAM roles
    Type: String
    Default: "none"
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"

Mappings:
  HostedZoneImportName:
    "130355686670": # IPV Core dev01
      Name: Dev01StubsHostedZoneId
    "175872367215": # IPV Core dev02
      Name: Dev02StubsHostedZoneId
    "110869144943": # Reuse stubs dev
      Name: ReusePublicHostedZoneId
    "054367266435": # Reuse stubs build
      Name: ReusePublicHostedZoneId

Conditions:
  IsIPVCore:
    Fn::Or:
      - Condition: IsDev01
      - Condition: IsDev02

  IsDev01: 
    Fn::Equals: [ !Ref "AWS::AccountId", "130355686670"]

  IsDev02:
    Fn::Equals: [ !Ref "AWS::AccountId", "175872367215"]

  IsReuse:
    Fn::Or:
      - Condition: IsReuseDev
      - Condition: IsReuseBuild

  IsReuseDev: 
    Fn::Equals: [ !Ref "AWS::AccountId", "110869144943"]

  IsReuseBuild:
    Fn::Equals: [ !Ref "AWS::AccountId", "054367266435"]

  IsReuseMain:
    Fn::Equals: [ !Ref "AWS::StackName", "evcs-stub"]
      
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"

Resources:
  # lambda to stub EVCS - evcsCreateUserVCs
  EvcsCreateUserVCsFunction:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
    # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
    # checkov:skip=CKV_AWS_173: doing it later
    DependsOn:
      - "EvcsCreateUserVCsFunctionLogGroup"
    Properties:
      FunctionName: !Sub "evcsCreateUserVCs-${Environment}"
      CodeUri: "../lambdas"
      Handler: evcsHandler.createHandler
      Runtime: nodejs22.x
      PackageType: Zip
      Architectures:
        - arm64
      MemorySize: 2048
      Tracing: Active
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          EVCS_PARAM_BASE_PATH: "/stubs/core/evcs/"
          ISSUER: "https://evcs-cri.stubs.account.gov.uk"
          EVCS_STUB_USER_VCS_STORE_TABLE_NAME: !Ref EvcsStubUserVcsStoreTable
          NODE_OPTIONS: --enable-source-maps
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt EvcsLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - SSMParameterReadPolicy:
            ParameterName: stubs/core/evcs/*
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBCrudPolicy:
            TableName: !Ref EvcsStubUserVcsStoreTable
      AutoPublishAlias: live
      Events:
        CreateUserVCs:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /vcs/{userId}
            Method: POST
    Metadata:
      # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - src/handlers/evcsHandler.ts

  # lambda to stub EVCS - evcsUpdateUserVCs
  EvcsUpdateUserVCsFunction:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
    # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
    # checkov:skip=CKV_AWS_173: doing it later
    DependsOn:
      - "EvcsUpdateUserVCsFunctionLogGroup"
    Properties:
      FunctionName: !Sub "evcsUpdateUserVCs-${Environment}"
      CodeUri: "../lambdas"
      Handler: evcsHandler.updateHandler
      Runtime: nodejs22.x
      PackageType: Zip
      Architectures:
        - arm64
      MemorySize: 2048
      Tracing: Active
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          EVCS_PARAM_BASE_PATH: "/stubs/core/evcs/"
          ISSUER: "https://evcs-cri.stubs.account.gov.uk"
          EVCS_STUB_USER_VCS_STORE_TABLE_NAME: !Ref EvcsStubUserVcsStoreTable
          NODE_OPTIONS: --enable-source-maps
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt EvcsLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - SSMParameterReadPolicy:
            ParameterName: stubs/core/evcs/*
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBCrudPolicy:
            TableName: !Ref EvcsStubUserVcsStoreTable
      AutoPublishAlias: live
      Events:
        UpdateUserVCs:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /vcs/{userId}
            Method: PATCH
    Metadata:
      # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - src/handlers/evcsHandler.ts

  # lambda to stub EVCS - evcsPostIdentity
  EvcsPostIdentityFunction:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
    # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
    # checkov:skip=CKV_AWS_173: doing it later
    DependsOn:
      - "EvcsPostIdentityFunctionLogGroup"
    Properties:
      FunctionName: !Sub "evcsPostIdentity-${Environment}"
      CodeUri: "../lambdas"
      Handler: evcsHandler.postIdentityHandler
      Runtime: nodejs22.x
      PackageType: Zip
      Architectures:
        - arm64
      MemorySize: 2048
      Tracing: Active
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          EVCS_PARAM_BASE_PATH: "/stubs/core/evcs/"
          ISSUER: "https://evcs-cri.stubs.account.gov.uk"
          EVCS_STUB_USER_VCS_STORE_TABLE_NAME: !Ref EvcsStubUserVcsStoreTable
          EVCS_STUB_STORED_IDENTITY_OBJECT_TABLE_NAME: !Ref EvcsStoredIdentityStoreTable
          NODE_OPTIONS: --enable-source-maps
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt EvcsLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - SSMParameterReadPolicy:
            ParameterName: stubs/core/evcs/*
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBCrudPolicy:
            TableName: !Ref EvcsStubUserVcsStoreTable
        - DynamoDBCrudPolicy:
            TableName: !Ref EvcsStoredIdentityStoreTable
      AutoPublishAlias: live
      Events:
        PostIdentity:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /identity
            Method: POST
    Metadata:
      # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - src/handlers/evcsHandler.ts

  # lambda to stub EVCS - evcsInvalidateIdentity
  EvcsInvalidateStoredIdentityFunction:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
    # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
    # checkov:skip=CKV_AWS_173: doing it later
    DependsOn:
      - "EvcsInvalidateStoredIdentityFunctionLogGroup"
    Properties:
      FunctionName: !Sub "evcsInvalidateStoredIdentity-${Environment}"
      CodeUri: "../lambdas"
      Handler: evcsHandler.invalidateStoredIdentityHandler
      Runtime: nodejs22.x
      PackageType: Zip
      Architectures:
        - arm64
      MemorySize: 2048
      Tracing: Active
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          EVCS_PARAM_BASE_PATH: "/stubs/core/evcs/"
          ISSUER: "https://evcs-cri.stubs.account.gov.uk"
          EVCS_STUB_USER_VCS_STORE_TABLE_NAME: !Ref EvcsStubUserVcsStoreTable
          EVCS_STUB_STORED_IDENTITY_OBJECT_TABLE_NAME: !Ref EvcsStoredIdentityStoreTable
          NODE_OPTIONS: --enable-source-maps
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt EvcsLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - SSMParameterReadPolicy:
            ParameterName: stubs/core/evcs/*
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBCrudPolicy:
            TableName: !Ref EvcsStubUserVcsStoreTable
        - DynamoDBCrudPolicy:
            TableName: !Ref EvcsStoredIdentityStoreTable
      AutoPublishAlias: live
      Events:
        InvalidateStoredIdentity:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /identity/invalidate
            Method: POST
    Metadata:
      # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - src/handlers/evcsHandler.ts

  # lambda to stub EVCS - evcsGetUserVCs
  EvcsGetUserVCsFunction:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
    # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
    # checkov:skip=CKV_AWS_173: doing it later
    DependsOn:
      - "EvcsGetUserVCsFunctionLogGroup"
    Properties:
      FunctionName: !Sub "evcsGetUserVCs-${Environment}"
      CodeUri: "../lambdas"
      Handler: evcsHandler.getHandler
      Runtime: nodejs22.x
      PackageType: Zip
      Architectures:
        - arm64
      MemorySize: 2048
      Tracing: Active
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          EVCS_PARAM_BASE_PATH: "/stubs/core/evcs/"
          ISSUER: "https://evcs-cri.stubs.account.gov.uk"
          EVCS_STUB_USER_VCS_STORE_TABLE_NAME: !Ref EvcsStubUserVcsStoreTable
          NODE_OPTIONS: --enable-source-maps
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt EvcsLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - SSMParameterReadPolicy:
            ParameterName: stubs/core/evcs/*
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBCrudPolicy:
            TableName: !Ref EvcsStubUserVcsStoreTable
      AutoPublishAlias: live
      Events:
        GetUserVCs:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /vcs/{userId}
            Method: GET
        GetMigratedUserVCs:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /migration/{userId}
            Method: GET
    Metadata:
      # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - src/handlers/evcsHandler.ts

  # lambda for management endpoint to retrieve stored identity record for user
  EvcsManagementGetStoredIdentityFunction:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
    # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
    # checkov:skip=CKV_AWS_173: doing it later
    DependsOn:
      - "EvcsManagementGetStoredIdentityFunctionLogGroup"
    Properties:
      FunctionName: !Sub "evcsManagementGetStoredIdentity-${Environment}"
      CodeUri: "../lambdas"
      Handler: evcsManagementHandler.getUserStoredIdentityHandler
      Runtime: nodejs22.x
      PackageType: Zip
      Architectures:
        - arm64
      MemorySize: 2048
      Tracing: Active
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          EVCS_PARAM_BASE_PATH: "/stubs/core/evcs/"
          ISSUER: "https://evcs-cri.stubs.account.gov.uk"
          EVCS_STUB_USER_VCS_STORE_TABLE_NAME: !Ref EvcsStubUserVcsStoreTable
          EVCS_STUB_STORED_IDENTITY_OBJECT_TABLE_NAME: !Ref EvcsStoredIdentityStoreTable
          NODE_OPTIONS: --enable-source-maps
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt EvcsLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - SSMParameterReadPolicy:
            ParameterName: stubs/core/evcs/*
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBCrudPolicy:
            TableName: !Ref EvcsStubUserVcsStoreTable
        - DynamoDBCrudPolicy:
            TableName: !Ref EvcsStoredIdentityStoreTable
      AutoPublishAlias: live
      Events:
        GetStoredIdentity:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /management/stored-identity/{userId}
            Method: GET
    Metadata:
      # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - src/handlers/evcsManagementHandler.ts

  # lambda for management endpoint to store SI record for user
  EvcsManagementCreateStoredIdentityFunction:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
    # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
    # checkov:skip=CKV_AWS_173: doing it later
    DependsOn:
      - "EvcsManagementCreateStoredIdentityFunctionLogGroup"
    Properties:
      FunctionName: !Sub "evcsManagementCreateStoredIdentity-${Environment}"
      CodeUri: "../lambdas"
      Handler: evcsManagementHandler.createUserStoredIdentityHandler
      Runtime: nodejs22.x
      PackageType: Zip
      Architectures:
        - arm64
      MemorySize: 2048
      Tracing: Active
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          EVCS_PARAM_BASE_PATH: "/stubs/core/evcs/"
          ISSUER: "https://evcs-cri.stubs.account.gov.uk"
          EVCS_STUB_USER_VCS_STORE_TABLE_NAME: !Ref EvcsStubUserVcsStoreTable
          EVCS_STUB_STORED_IDENTITY_OBJECT_TABLE_NAME: !Ref EvcsStoredIdentityStoreTable
          NODE_OPTIONS: --enable-source-maps
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt EvcsLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - SSMParameterReadPolicy:
            ParameterName: stubs/core/evcs/*
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBCrudPolicy:
            TableName: !Ref EvcsStubUserVcsStoreTable
        - DynamoDBCrudPolicy:
            TableName: !Ref EvcsStoredIdentityStoreTable
      AutoPublishAlias: live
      Events:
        GetStoredIdentity:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /management/stored-identity/{userId}
            Method: POST
    Metadata:
      # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - src/handlers/evcsManagementHandler.ts

  EvcsCreateUserVCsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    # checkov:skip=CKV_AWS_158: No need for customer managed keys for short lived logs
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/createEvcsUserVCs-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn
  EvcsUpdateUserVCsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    # checkov:skip=CKV_AWS_158: No need for customer managed keys for short lived logs
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/updateEvcsUserVCs-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn
  EvcsPostIdentityFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    # checkov:skip=CKV_AWS_158: No need for customer managed keys for short lived logs
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/evcsPostIdentity-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn
  EvcsInvalidateStoredIdentityFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    # checkov:skip=CKV_AWS_158: No need for customer managed keys for short lived logs
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/evcsInvalidateStoredIdentity-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn
  EvcsGetUserVCsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    # checkov:skip=CKV_AWS_158: No need for customer managed keys for short lived logs
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/getEvcsUserVCs-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn
  EvcsManagementGetStoredIdentityFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    # checkov:skip=CKV_AWS_158: No need for customer managed keys for short lived logs
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/evcsManagementGetStoredIdentity-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn
  EvcsManagementCreateStoredIdentityFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    # checkov:skip=CKV_AWS_158: No need for customer managed keys for short lived logs
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/evcsManagementCreateStoredIdentity-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  EvcsLambdaSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        EVCS Lambdas Security Group
      SecurityGroupIngress:
        - CidrIp:
            Fn::ImportValue: !Sub ${VpcStackName}-VpcCidr
          Description: Allow ingress traffic from vpc cidr to port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId

  EvcsStubUserVcsStoreTable:
    Type: AWS::DynamoDB::Table
    # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
    Properties:
      TableName: !Sub "evcs-stub-user-vcs-store-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "userId"
          AttributeType: "S"
        - AttributeName: "vcSignature"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userId"
          KeyType: "HASH"
        - AttributeName: "vcSignature"
          KeyType: "RANGE"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DynamoDBKmsKey.Arn

  EvcsStoredIdentityStoreTable:
    Type: AWS::DynamoDB::Table
    # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
    Properties:
      TableName: !Sub "evcs-stored-identity-store-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "userId"
          AttributeType: "S"
        - AttributeName: "recordType"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userId"
          KeyType: "HASH"
        - AttributeName: "recordType"
          KeyType: "RANGE"
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DynamoDBKmsKey.Arn

  # kms key for DynamoDB
  DynamoDBKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: "dynamodb.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              StringEquals:
                "kms:CallerAccount": !Sub "${AWS::AccountId}"
                "kms:ViaService":
                  - "dynamodb.amazonaws.com"
                  - !Sub "lambda.${AWS::Region}.amazonaws.com"

  # kms key for logging
  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  # ssl cert
  EvcsStubSSLCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If 
        - IsReuse
        - !If 
          - IsReuseDev
          - !If
            - IsReuseMain
            - !Sub "evcs.reuse.${Environment}.stubs.account.gov.uk"
            - !Sub "evcs-${AWS::StackName}.reuse.${Environment}.stubs.account.gov.uk"
          - !Sub "evcs.reuse.stubs.account.gov.uk"
        - !If
          - IsDev01
          - !Sub "evcs-${Environment}.01.core.dev.stubs.account.gov.uk"
          - !Sub "evcs-${Environment}.02.core.dev.stubs.account.gov.uk"
      DomainValidationOptions:
        - DomainName: !If 
          - IsReuse
          - !If 
            - IsReuseDev
            - !If
              - IsReuseMain
              - !Sub "evcs.reuse.${Environment}.stubs.account.gov.uk"
              - !Sub "evcs-${AWS::StackName}.reuse.${Environment}.stubs.account.gov.uk"
            - !Sub "evcs.reuse.stubs.account.gov.uk"
          - !If
            - IsDev01
            - !Sub "evcs-${Environment}.01.core.dev.stubs.account.gov.uk"
            - !Sub "evcs-${Environment}.02.core.dev.stubs.account.gov.uk"
          HostedZoneId:
            Fn::ImportValue:
              Fn::FindInMap: [HostedZoneImportName, !Ref "AWS::AccountId", Name]
      ValidationMethod: DNS

  # api domain entries / mapping
  EvcsStubRestApiDomain:
    Type: AWS::ApiGateway::DomainName
    # checkov:skip=CKV_AWS_120: doing it later
    Properties:
      DomainName: !If 
        - IsReuse
        - !If 
          - IsReuseDev
          - !If
            - IsReuseMain
            - !Sub "evcs.reuse.${Environment}.stubs.account.gov.uk"
            - !Sub "evcs-${AWS::StackName}.reuse.${Environment}.stubs.account.gov.uk"
          - !Sub "evcs.reuse.stubs.account.gov.uk"
        - !If
          - IsDev01
          - !Sub "evcs-${Environment}.01.core.dev.stubs.account.gov.uk"
          - !Sub "evcs-${Environment}.02.core.dev.stubs.account.gov.uk"
      RegionalCertificateArn: !Ref EvcsStubSSLCert
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

  EvcsStubRestApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    # checkov:skip=CKV_AWS_120: doing it later
    Properties:
      DomainName: !If 
        - IsReuse
        - !If 
          - IsReuseDev
          - !If
            - IsReuseMain
            - !Sub "evcs.reuse.${Environment}.stubs.account.gov.uk"
            - !Sub "evcs-${AWS::StackName}.reuse.${Environment}.stubs.account.gov.uk"
          - !Sub "evcs.reuse.stubs.account.gov.uk"
        - !If
          - IsDev01
          - !Sub "evcs-${Environment}.01.core.dev.stubs.account.gov.uk"
          - !Sub "evcs-${Environment}.02.core.dev.stubs.account.gov.uk"
      RestApiId: !Ref RestApiGateway
      Stage: !Ref RestApiGateway.Stage
    DependsOn:
      - EvcsStubRestApiDomain

  # dns record
  EvcsStubDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      Name: !If 
        - IsReuse
        - !If 
          - IsReuseDev
          - !If
            - IsReuseMain
            - !Sub "evcs.reuse.${Environment}.stubs.account.gov.uk"
            - !Sub "evcs-${AWS::StackName}.reuse.${Environment}.stubs.account.gov.uk"
          - !Sub "evcs.reuse.stubs.account.gov.uk"
        - !If
          - IsDev01
          - !Sub "evcs-${Environment}.01.core.dev.stubs.account.gov.uk"
          - !Sub "evcs-${Environment}.02.core.dev.stubs.account.gov.uk"
      HostedZoneId:
        Fn::ImportValue:
          Fn::FindInMap: [HostedZoneImportName, !Ref "AWS::AccountId", Name]
      AliasTarget:
        DNSName: !GetAtt EvcsStubRestApiDomain.RegionalDomainName
        HostedZoneId: !GetAtt EvcsStubRestApiDomain.RegionalHostedZoneId

  RestApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      # checkov:skip=CKV_AWS_120: We are not implementing API Gateway caching at the time.
      Name: !Sub EVCS API Gateway ${Environment}
      StageName: !Sub ${Environment}
      TracingEnabled: true
      DefinitionBody:
        openapi: "3.0.3" # workaround to get `sam validate` to work
        paths: # workaround to get `sam validate` to work
          /foo:
            options: {} # workaround to get `sam validate` to work
        'Fn::Transform':
          Name: "AWS::Include"
          Parameters:
            Location: "../openAPI/evcs-external.yaml"
      ApiKeySourceType: HEADER #pragma: allowlist secret
      Auth:
        ApiKeyRequired: true #pragma: allowlist secret
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: "EVCS Usage Plan"
      AccessLogSetting:
        DestinationArn: !GetAtt RestApiLogGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }

  RestApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/evcsRestApi-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

Outputs:
  RestApiGatewayID:
    Description: EVCS API Gateway ID
    Export:
      Name: !Sub "EvcsRestApiGatewayID-${Environment}"
    Value: !Ref RestApiGateway
