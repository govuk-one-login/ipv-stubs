AWSTemplateFormatVersion: "2010-09-09"

Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Timeout: 30

Description: >-
  This creates the lambda function to stub CIMIT lambda's for getContraIndicators, getContraIndicatorCredential, 
  putContraIndicators and postMitigations.

Parameters:
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
  Environment:
    Description: The name of the environment to deploy to.
    Type: String
    AllowedPattern: ((production)|(build)|(dev.*))

Conditions:
  IsDevelopment: !Not
    - !Or
      - !Equals [ !Ref Environment, "build"]
      - !Equals [ !Ref Environment, "production"]
  IsProduction: !Equals [ !Ref Environment, production ]
  IsNonProd: !Not
    - !Or
      - !Condition IsDevelopment
      - !Condition IsProduction

Resources:
  # lambda to replicate cimit putContraIndicators
  PutContraIndicatorslambda:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    DependsOn:
      - "PutContraIndicatorCredentialFunctionLogGroup"
    Properties:
      FunctionName: !Sub "putContraIndicatorCredential-${Environment}"
      CodeUri: "../lambdas/put-contra-indicator-credential"
      Handler: uk.gov.di.ipv.core.putcontraindicatorcredential.PutContraIndicatorCredentialHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      Architectures:
        - arm64
      Environment:
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt CimitLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - Statement:
            - Sid: AllowGetSSMParam
              Effect: Allow
              Action:
                - "ssm:GetParameter"
              Resource:
                - !Sub "arn:aws:ssm:eu-west-2:${AWS::AccountId}:parameter/stubs/*"

  # lambda to replicate cimit getContraIndicators
  GetContraIndicatorsLambda:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    DependsOn:
      - "GetContraIndicatorsFunctionLogGroup"
    Properties:
      FunctionName: !Sub "getContraIndicators-${Environment}"
      CodeUri: "../lambdas/get-contra-indicators"
      Handler: uk.gov.di.ipv.core.getcontraindicators.GetContraIndicatorsHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      Architectures:
        - arm64
      Environment:
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt CimitLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - Statement:
            - Sid: AllowGetSSMParam
              Effect: Allow
              Action:
                - "ssm:GetParameter"
              Resource:
                - !Sub "arn:aws:ssm:eu-west-2:${AWS::AccountId}:parameter/stubs/*"

  # lambda to replicate cimit getContraIndicatorCredential
  GetContraIndicatorCredentialLambda:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    DependsOn:
      - "GetContraIndicatorCredentialFunctionLogGroup"
    Properties:
      FunctionName: !Sub "getContraIndicatorCredential-${Environment}"
      CodeUri: "../lambdas/get-contra-indicator-credential"
      Handler: uk.gov.di.ipv.core.getcontraindicatorcredential.GetContraIndicatorCredentialHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      Architectures:
        - arm64
      Environment:
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt CimitLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - Statement:
            - Sid: AllowGetSSMParam
              Effect: Allow
              Action:
                - "ssm:GetParameter"
              Resource:
                - !Sub "arn:aws:ssm:eu-west-2:${AWS::AccountId}:parameter/stubs/*"

  # lambda to replicate cimit postMitigations
  PostMitigationsLambda:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    DependsOn:
      - "PostMitigationsFunctionLogGroup"
    Properties:
      FunctionName: !Sub "postMitigations-${Environment}"
      CodeUri: "../lambdas/post-mitigations"
      Handler: uk.gov.di.ipv.core.postmitigations.PostMitigationsHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      Architectures:
        - arm64
      Environment:
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt CimitLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - Statement:
            - Sid: AllowGetSSMParam
              Effect: Allow
              Action:
                - "ssm:GetParameter"
              Resource:
                - !Sub "arn:aws:ssm:eu-west-2:${AWS::AccountId}:parameter/stubs/*"

  PutContraIndicatorCredentialFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/put-contra-indicator-credential-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  GetContraIndicatorsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/get-contra-indicators-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  GetContraIndicatorCredentialFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/get-contra-indicator-credential-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  PostMitigationsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/post-mitigations-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  CimitLambdaSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        CIMIT Lambda Security Group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow egress HTTPS traffic to vpc cidr from port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      SecurityGroupIngress:
        - CidrIp:
            Fn::ImportValue: !Sub ${VpcStackName}-VpcCidr
          Description: Allow ingress traffic from vpc cidr to port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId

  # kms key for logging
  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"




