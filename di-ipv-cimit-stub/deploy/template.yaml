AWSTemplateFormatVersion: "2010-09-09"

Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Environment:
      Variables:
        AWS_LAMBDA_EXEC_WRAPPER: /opt/dynatrace
        DT_CONNECTION_AUTH_TOKEN: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_AUTH_TOKEN}}'  #pragma: allowlist secret
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]  #pragma: allowlist secret
        DT_CONNECTION_BASE_URL: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_BASE_URL}}'   #pragma: allowlist secret
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]  #pragma: allowlist secret
        DT_CLUSTER_ID: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CLUSTER_ID}}'   #pragma: allowlist secret
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]  #pragma: allowlist secret
        DT_LOG_COLLECTION_AUTH_TOKEN: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_LOG_COLLECTION_AUTH_TOKEN}}'  #pragma: allowlist secret
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]  #pragma: allowlist secret
        DT_TENANT: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_TENANT}}'   #pragma: allowlist secret
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]   #pragma: allowlist secret
        DT_OPEN_TELEMETRY_ENABLE_INTEGRATION: "true"
    Timeout: 30
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    Layers:
      - !Sub
        - '{{resolve:secretsmanager:${SecretArn}:SecretString:JAVA_LAYER}}' # or NODEJS_LAYER or PYTHON_LAYER  #pragma: allowlist secret
        - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]  #pragma: allowlist secret

Description: >-
  This creates the lambda functions to stub CIMIT lambdas for getContraIndicators, getContraIndicatorCredential,
  putContraIndicators and postMitigations.

Parameters:
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
  Environment:
    Description: The name of the environment to deploy to.
    Type: String
    AllowedPattern: ((production)|(build)|(dev.*))
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply when creating IAM roles
    Type: String
    Default: "none"
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"

Conditions:
  IsDevelopment: !Not
    - !Or
      - !Equals [ !Ref Environment, "build"]
      - !Equals [ !Ref Environment, "production"]
  IsCoreDev: !Or
    - !Equals [ !Ref AWS::AccountId, "130355686670"]
    - !Equals [ !Ref AWS::AccountId, "175872367215"]
  IsProduction: !Equals [ !Ref Environment, "production" ]
  IsNonProd: !Not
    - !Or
      - !Condition IsDevelopment
      - !Condition IsProduction
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"

Mappings:
  EnvironmentConfiguration:
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables #pragma: allowlist secret
    production:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables #pragma: allowlist secret
  CoreAccounts:
    dev01:
      accountId: "130355686670"
    dev02:
      accountId: "175872367215"
    build:
      accountId: "457601271792"

Resources:
  # lambda to stub cimit getContraIndicators
  GetContraIndicatorsFunction:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
    # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
    # checkov:skip=CKV_AWS_173: doing it later
    DependsOn:
      - "GetContraIndicatorsFunctionLogGroup"
    Properties:
      FunctionName: !Sub "getContraIndicators-${Environment}"
      CodeUri: "../lambdas/get-contra-indicators"
      Handler: uk.gov.di.ipv.core.getcontraindicators.GetContraIndicatorsHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      Architectures:
        - arm64
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          CIMIT_STUB_TABLE_NAME: !Ref CimitStubTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt CimitLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - DynamoDBReadPolicy:
            TableName: !Ref CimitStubTable
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
      AutoPublishAlias: live

  GetContraIndicatorsFunctionCoreDev01InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetContraIndicatorsFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, dev01, accountId ]

  GetContraIndicatorsFunctionCoreDev02InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetContraIndicatorsFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, dev02, accountId ]

  GetContraIndicatorsFunctionCoreBuildInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetContraIndicatorsFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, build, accountId ]

  # lambda to stub cimit postMitigations
  PostMitigationsFunction:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
    # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
    DependsOn:
      - "PostMitigationsFunctionLogGroup"
    Properties:
      FunctionName: !Sub "postMitigations-${Environment}"
      CodeUri: "../lambdas/post-mitigations"
      Handler: uk.gov.di.ipv.core.postmitigations.PostMitigationsHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      Architectures:
        - arm64
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          CIMIT_STUB_TABLE_NAME: !Ref CimitStubTable
          PENDING_MITIGATIONS_TABLE: !Ref PendingMitigationsTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt CimitLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - SSMParameterReadPolicy:
            ParameterName: stubs/core/*
        - DynamoDBCrudPolicy:
            TableName: !Ref CimitStubTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PendingMitigationsTable
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
      AutoPublishAlias: live

  PostMitigationsFunctionCoreDev01InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PostMitigationsFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, dev01, accountId ]

  PostMitigationsFunctionCoreDev02InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PostMitigationsFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, dev02, accountId ]

  PostMitigationsFunctionCoreBuildInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PostMitigationsFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, build, accountId ]

  # lambda to stub cimit putContraIndicators
  PutContraIndicatorsFunction:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
    # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
    DependsOn:
      - "PutContraIndicatorsFunctionLogGroup"
    Properties:
      FunctionName: !Sub "putContraIndicators-${Environment}"
      CodeUri: "../lambdas/put-contra-indicators"
      Handler: uk.gov.di.ipv.core.putcontraindicators.PutContraIndicatorsHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      Architectures:
        - arm64
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          CIMIT_PARAM_BASE_PATH: "/stubs/core/cimit/"
          IS_LOCAL: false
          CIMIT_STUB_TABLE_NAME: !Ref CimitStubTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt CimitLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - SSMParameterReadPolicy:
            ParameterName: stubs/core/*
        - DynamoDBCrudPolicy:
            TableName: !Ref CimitStubTable
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
      AutoPublishAlias: live

  PutContraIndicatorsFunctionCoreDev01InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PutContraIndicatorsFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, dev01, accountId ]

  PutContraIndicatorsFunctionCoreDev02InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PutContraIndicatorsFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, dev02, accountId ]

  PutContraIndicatorsFunctionCoreBuildInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PutContraIndicatorsFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, build, accountId ]

  # lambda to stub cimit getContraIndicatorCredential
  GetContraIndicatorCredentialFunction:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
    # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
    DependsOn:
      - "GetContraIndicatorCredentialFunctionLogGroup"
    Properties:
      FunctionName: !Sub "getContraIndicatorCredential-${Environment}"
      CodeUri: "../lambdas/get-contra-indicator-credential"
      Handler: uk.gov.di.ipv.core.getcontraindicatorcredential.GetContraIndicatorCredentialHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      Architectures:
        - arm64
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          CIMIT_PARAM_BASE_PATH: "/stubs/core/cimit/"
          CIMIT_STUB_TABLE_NAME: !Ref CimitStubTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt CimitLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - SSMParameterReadPolicy:
            ParameterName: stubs/core/cimit/*
        - DynamoDBReadPolicy:
            TableName: !Ref CimitStubTable
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
      AutoPublishAlias: live

  GetContraIndicatorCredentialFunctionCoreDev01InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetContraIndicatorCredentialFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, dev01, accountId ]

  GetContraIndicatorCredentialFunctionCoreDev02InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetContraIndicatorCredentialFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, dev02, accountId ]

  GetContraIndicatorCredentialFunctionCoreBuildInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetContraIndicatorCredentialFunction
      Action: "lambda:InvokeFunction"
      Principal: !FindInMap [ CoreAccounts, build, accountId ]

  # lambda to stub management
  StubManagementFunction:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_109: this requires a broad set of permissions
    # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
    # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
    DependsOn:
      - "StubManagementFunctionLogGroup"
    Properties:
      FunctionName: !Sub "stubManagement-${Environment}"
      CodeUri: "../lambdas/stub-management"
      Handler: uk.gov.di.ipv.core.stubmanagement.StubManagementHandler::handleRequest
      Runtime: java17
      PackageType: Zip
      Architectures:
        - arm64
      MemorySize: 2048
      Tracing: Active
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          CIMIT_PARAM_BASE_PATH: "/stubs/core/cimit/"
          IS_LOCAL: false
          CIMIT_STUB_TABLE_NAME: !Ref CimitStubTable
          PENDING_MITIGATIONS_TABLE: !Ref PendingMitigationsTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - !GetAtt CimitLambdaSecurityGroup.GroupId
      Policies:
        - VPCAccessPolicy: { }
        - SSMParameterReadPolicy:
            ParameterName: stubs/core/cimit/*
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKmsKey
        - DynamoDBCrudPolicy:
            TableName: !Ref CimitStubTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PendingMitigationsTable
      AutoPublishAlias: live
      Events:
        PostCis:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /user/{userId}/cis
            Method: POST
        PutCis:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /user/{userId}/cis
            Method: PUT
        PostMitigations:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /user/{userId}/mitigations/{ci}
            Method: POST
        PutMitigations:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /user/{userId}/mitigations/{ci}
            Method: PUT

  GetContraIndicatorsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/getContraIndicators-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  PostMitigationsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/postMitigations-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  PutContraIndicatorsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/putContraIndicators-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  GetContraIndicatorCredentialFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/getContraIndicatorCredential-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  StubManagementFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/stubManagement-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  CimitLambdaSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        CIMIT Lambdas Security Group
      SecurityGroupIngress:
        - CidrIp:
            Fn::ImportValue: !Sub ${VpcStackName}-VpcCidr
          Description: Allow ingress traffic from vpc cidr to port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId

  CimitStubTable:
    Type: AWS::DynamoDB::Table
    # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
    Properties:
      TableName: !Sub "cimit-stub-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "userId"
          AttributeType: "S"
        - AttributeName: "contraIndicatorCode"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userId"
          KeyType: "HASH"
        - AttributeName: "contraIndicatorCode"
          KeyType: "RANGE"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DynamoDBKmsKey.Arn

  PendingMitigationsTable:
    Type: AWS::DynamoDB::Table
    # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
    Properties:
      TableName: !Sub "cimit-stub-pending-mitigations-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "vcJti"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "vcJti"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DynamoDBKmsKey.Arn

  # kms key for DynamoDB
  DynamoDBKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: "dynamodb.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              StringEquals:
                "kms:CallerAccount": !Sub "${AWS::AccountId}"
                "kms:ViaService":
                  - "dynamodb.amazonaws.com"
                  - !Sub "lambda.${AWS::Region}.amazonaws.com"

  # kms key for logging
  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  # ssl cert
  CimitStubSSLCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If
        - IsCoreDev
        - !Sub "cimit-${Environment}.core.dev.stubs.account.gov.uk"
        - !If [ IsNonProd, !Sub "cimit.${Environment}.stubs.account.gov.uk", cimit.stubs.account.gov.uk ]
      DomainValidationOptions:
        - DomainName: !If
            - IsCoreDev
            - !Sub "cimit-${Environment}.core.dev.stubs.account.gov.uk"
            - !If [ IsNonProd, !Sub "cimit.${Environment}.stubs.account.gov.uk", cimit.stubs.account.gov.uk ]
          HostedZoneId: !If
            - IsCoreDev
            - !ImportValue DevPublicHostedZoneId
            - !If [ IsNonProd, !ImportValue BuildPublicHostedZoneId, !ImportValue RootPublicHostedZoneId ]
      ValidationMethod: DNS

    # api domain entries / mapping
  CimitStubRestApiDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !If
        - IsCoreDev
        - !Sub "cimit-${Environment}.core.dev.stubs.account.gov.uk"
        - !If [ IsNonProd, !Sub "cimit.${Environment}.stubs.account.gov.uk", cimit.stubs.account.gov.uk ]
      RegionalCertificateArn: !Ref CimitStubSSLCert
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

  CimitStubRestApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !If
        - IsCoreDev
        - !Sub "cimit-${Environment}.core.dev.stubs.account.gov.uk"
        - !If [ IsNonProd, !Sub "cimit.${Environment}.stubs.account.gov.uk", cimit.stubs.account.gov.uk ]
      RestApiId: !Ref RestApiGateway
      Stage: !Ref RestApiGateway.Stage
    DependsOn:
      - CimitStubRestApiDomain
      - RestApiGateway

  # dns record
  CimitStubDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      Name: !If
        - IsCoreDev
        - !Sub "cimit-${Environment}.core.dev.stubs.account.gov.uk"
        - !If [ IsNonProd, !Sub "cimit.${Environment}.stubs.account.gov.uk", cimit.stubs.account.gov.uk ]
      HostedZoneId: !If
        - IsCoreDev
        - !ImportValue DevPublicHostedZoneId
        - !If [ IsNonProd, !ImportValue BuildPublicHostedZoneId, !ImportValue RootPublicHostedZoneId ]
      AliasTarget:
        DNSName: !GetAtt CimitStubRestApiDomain.RegionalDomainName
        HostedZoneId: !GetAtt CimitStubRestApiDomain.RegionalHostedZoneId

  RestApiGateway:
    Type: AWS::Serverless::Api
    DependsOn: StubManagementFunction
    Properties:
      # checkov:skip=CKV_AWS_120: We are not implementing API Gateway caching at the time.
      Name: !Sub CIMIT API Gateway ${Environment}
      StageName: !Sub ${Environment}
      TracingEnabled: true
      DefinitionBody:
        openapi: "3.0.3" # workaround to get `sam validate` to work
        paths: # workaround to get `sam validate` to work
          /foo:
            options: {} # workaround to get `sam validate` to work
        'Fn::Transform':
          Name: "AWS::Include"
          Parameters:
            Location: "../openAPI/cimit-external.yaml"
      ApiKeySourceType: HEADER #pragma: allowlist secret
      Auth:
        ApiKeyRequired: true #pragma: allowlist secret
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: "CIMIT Usage Plan"
      AccessLogSetting:
        DestinationArn: !GetAtt RestApiLogGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }

  RestApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/restApi-${Environment}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

Outputs:
  RestApiGatewayID:
    Description: Cimit API Gateway ID
    Export:
      Name: !Sub "RestApiGatewayID-${Environment}"
    Value: !Ref RestApiGateway
