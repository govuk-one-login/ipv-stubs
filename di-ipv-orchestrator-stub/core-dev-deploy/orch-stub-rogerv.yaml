AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Timeout: 30
Description: This creates the necessary components to deploy IPV Orch Stub onto ECS Fargate within the dev platform VPC and private subnets (provided as parameters).
Parameters:
  Environment:
    Description: The name of the environment to deploy to.
    Type: String
    AllowedPattern: ((production)|(build)|(dev.*))
  VpcStackName:
    Description: "The name of the stack that defines the VPC in which this container will run.\n"
    Type: String
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply when creating IAM roles
    Type: String
    Default: none
  OrchestratorClientId:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: AWS::SSM::Parameter::Value<String>
    Default: /stubs/build/orch/env/ORCHESTRATOR_CLIENT_ID
  OrchestratorRedirectUrl:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: String
    Default: https://orch-dev-rogerv.02.core.dev.stubs.account.gov.uk/callback
  OrchestratorClientJwtTtl:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: AWS::SSM::Parameter::Value<String>
    Default: /stubs/build/orch/env/ORCHESTRATOR_CLIENT_JWT_TTL
  OrchestratorPort:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: AWS::SSM::Parameter::Value<String>
    Default: /stubs/build/orch/env/ORCHESTRATOR_PORT
  OrchestratorClientSigningKey:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: AWS::SSM::Parameter::Value<String>
    Default: /stubs/build/orch/env/ORCHESTRATOR_CLIENT_SIGNING_KEY
  OrchestratorDefaultJarEncryptionPublicKey:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: AWS::SSM::Parameter::Value<String>
    Default: /stubs/build/orch/env/ORCHESTRATOR_DEFAULT_JAR_ENCRYPTION_PUBLIC_KEY
  OrchestratorBuildJarEncryptionPublicKey:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: AWS::SSM::Parameter::Value<String>
    Default: /stubs/build/orch/env/ORCHESTRATOR_BUILD_JAR_ENCRYPTION_PUBLIC_KEY
  OrchestratorStagingJarEncryptionPublicKey:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: AWS::SSM::Parameter::Value<String>
    Default: /stubs/build/orch/env/ORCHESTRATOR_STAGING_JAR_ENCRYPTION_PUBLIC_KEY
  OrchestratorIntegrationJarEncryptionPublicKey:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: AWS::SSM::Parameter::Value<String>
    Default: /stubs/build/orch/env/ORCHESTRATOR_INTEGRATION_JAR_ENCRYPTION_PUBLIC_KEY
  OrchestratorBasicAuthEnable:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: AWS::SSM::Parameter::Value<String>
    Default: /stubs/build/orch/env/ORCHESTRATOR_BASIC_AUTH_ENABLE
  OrchestratorBasicAuthUsername:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: AWS::SSM::Parameter::Value<String>
    Default: /stubs/build/orch/env/ORCHESTRATOR_BASIC_AUTH_USERNAME
  OrchestratorBasicAuthPassword:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: AWS::SSM::Parameter::Value<String>
    Default: /stubs/build/orch/env/ORCHESTRATOR_BASIC_AUTH_PASSWORD
  IpvBackchannelEndpoint:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: String
    Default: https://api-dev-rogerv.02.dev.identity.account.gov.uk/dev-rogerv
  IpvBackchannelTokenPath:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: AWS::SSM::Parameter::Value<String>
    Default: /stubs/build/orch/env/IPV_BACKCHANNEL_TOKEN_PATH
  IpvBackchannelUserIdentityPath:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: AWS::SSM::Parameter::Value<String>
    Default: /stubs/build/orch/env/IPV_BACKCHANNEL_USER_IDENTITY_PATH
  IpvEndpoint:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: String
    Default: https://dev-rogerv.02.dev.identity.account.gov.uk/
  IpvCoreAudience:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: String
    Default: https://dev-rogerv.02.dev.identity.account.gov.uk
  JavaOpts:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: AWS::SSM::Parameter::Value<String>
    Default: /stubs/build/orch/env/JAVA_OPTS
  JbpConfigOpenJdkJre:
    Description: Environment Variables for ECS - Retrieved from SSM Parameter Store
    Type: AWS::SSM::Parameter::Value<String>
    Default: /stubs/build/orch/env/JBP_CONFIG_OPEN_JDK_JRE
Conditions:
  IsDevelopment: !Not
    - !Or
      - !Equals
        - !Ref 'Environment'
        - build
      - !Equals
        - !Ref 'Environment'
        - production
  IsDev01: !Equals
    - !Ref 'AWS::AccountId'
    - '130355686670'
  IsDev02: !Equals
    - !Ref 'AWS::AccountId'
    - '175872367215'
  IsNotDevelopment: !Not
    - !Condition 'IsDevelopment'
  UsePermissionsBoundary: !Not
    - !Equals
      - !Ref 'PermissionsBoundary'
      - none
Mappings:
  EnvironmentConfiguration:
    '130355686670':
      fargateCPUsize: '256'
      fargateRAMsize: '512'
      desiredTaskCount: 1
      environment: dev
      platform: core
    '175872367215':
      fargateCPUsize: '256'
      fargateRAMsize: '512'
      desiredTaskCount: 1
      environment: dev
      platform: core
    '826978934233':
      fargateCPUsize: '256'
      fargateRAMsize: '1024'
      desiredTaskCount: 1
      environment: build
      platform: core-stubs
    '616199614141':
      fargateCPUsize: '256'
      fargateRAMsize: '512'
      desiredTaskCount: 1
      environment: build
      platform: stubs
    '388905755587':
      fargateCPUsize: '512'
      fargateRAMsize: '1024'
      desiredTaskCount: 1
      environment: production
      platform: stubs
  SecurityGroups:
    PrefixListIds:
      dynamodb: pl-b3a742da
      s3: pl-7ca54015
Resources:
  OrchStubSSLCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If
        - IsDev01
        - !Sub 'orch-${Environment}.01.core.dev.stubs.account.gov.uk'
        - !If
          - IsDev02
          - !Sub 'orch-${Environment}.02.core.dev.stubs.account.gov.uk'
          - !Ref 'AWS::NoValue'
      DomainValidationOptions:
        - DomainName: !If
            - IsDev01
            - !Sub 'orch-${Environment}.01.core.dev.stubs.account.gov.uk'
            - !If
              - IsDev02
              - !Sub 'orch-${Environment}.02.core.dev.stubs.account.gov.uk'
              - !Ref 'AWS::NoValue'
          HostedZoneId: !If
            - IsDev01
            - !ImportValue 'Dev01StubsHostedZoneId'
            - !If
              - IsDev02
              - !ImportValue 'Dev02StubsHostedZoneId'
              - !ImportValue 'DevStubHostedZoneId'
      ValidationMethod: DNS
  OrchStubApiDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !If
        - IsDev01
        - !Sub 'orch-${Environment}.01.core.dev.stubs.account.gov.uk'
        - !If
          - IsDev02
          - !Sub 'orch-${Environment}.02.core.dev.stubs.account.gov.uk'
          - !Ref 'AWS::NoValue'
      DomainNameConfigurations:
        - CertificateArn: !Ref 'OrchStubSSLCert'
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2
  OrchStubApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      DomainName: !If
        - IsDev01
        - !Sub 'orch-${Environment}.01.core.dev.stubs.account.gov.uk'
        - !If
          - IsDev02
          - !Sub 'orch-${Environment}.02.core.dev.stubs.account.gov.uk'
          - !Ref 'AWS::NoValue'
      ApiId: !Ref 'ApiGwHttpEndpoint'
      Stage: $default
    DependsOn:
      - OrchStubApiDomain
      - APIStageDefault
  CoreStubDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      Name: !If
        - IsDev01
        - !Sub 'orch-${Environment}.01.core.dev.stubs.account.gov.uk'
        - !If
          - IsDev02
          - !Sub 'orch-${Environment}.02.core.dev.stubs.account.gov.uk'
          - !Ref 'AWS::NoValue'
      HostedZoneId: !If
        - IsDev01
        - !ImportValue 'Dev01StubsHostedZoneId'
        - !If
          - IsDev02
          - !ImportValue 'Dev02StubsHostedZoneId'
          - !ImportValue 'DevStubHostedZoneId'
      AliasTarget:
        DNSName: !GetAtt 'OrchStubApiDomain.RegionalDomainName'
        HostedZoneId: !GetAtt 'OrchStubApiDomain.RegionalHostedZoneId'
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Orch Stub LoadBalancer Security Group
      SecurityGroupIngress:
        - CidrIp: !ImportValue
            Fn::Sub: ${VpcStackName}-VpcCidr
          Description: Allow vpc cidr ingress to port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !ImportValue
        Fn::Sub: ${VpcStackName}-VpcId
  LoadBalancerSGEgressToECSSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt 'LoadBalancerSG.GroupId'
      Description: Egress between the Orch Stub load balancer and the Orch Stub ECS security group
      DestinationSecurityGroupId: !GetAtt 'OrchStubECSSecurityGroup.GroupId'
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
  OrchStubECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Orch Stub ECS Security Group outbound permissions ruleset
      SecurityGroupEgress:
        - DestinationPrefixListId: !FindInMap
            - SecurityGroups
            - PrefixListIds
            - dynamodb
          Description: Allow outbound traffic to dynamodb vpc endpoint
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - DestinationPrefixListId: !FindInMap
            - SecurityGroups
            - PrefixListIds
            - s3
          Description: Allow outbound traffic to s3 vpc endpoint
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - DestinationSecurityGroupId: !ImportValue
            Fn::Sub: ${VpcStackName}-AWSServicesEndpointSecurityGroupId
          Description: Allow outbound traffic to AWS Services vpc endpoint security group
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIpv6: ::/0
          Description: Allow outbound traffic to external IPV6 port 443
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: !ImportValue
            Fn::Sub: ${VpcStackName}-VpcCidr
          Description: Allow outbound traffic from vpc cidr to port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp: '0.0.0.0/0'
          Description: Allow egress HTTPS traffic to any from port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      SecurityGroupIngress:
        - CidrIp: !ImportValue
            Fn::Sub: ${VpcStackName}-VpcCidr
          Description: Allow inbound traffic from vpc cidr to port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId: !ImportValue
        Fn::Sub: ${VpcStackName}-VpcId
  OrchStubECSSecurityGroupIngressFromLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Orch Stub ECS permits inbound from the Orch Stub load balancer.
      FromPort: 8080
      ToPort: 8080
      GroupId: !GetAtt 'OrchStubECSSecurityGroup.GroupId'
      SourceSecurityGroupId: !GetAtt 'LoadBalancerSG.GroupId'
  ApiGwHttpEndpoint:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${AWS::StackName}-orch-api-gw'
      ProtocolType: HTTP
  ApiGwHttpEndpointIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref 'ApiGwHttpEndpoint'
      IntegrationType: HTTP_PROXY
      ConnectionId: !ImportValue
        Fn::Sub: ${VpcStackName}-VpcLinkId
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationUri: !Ref 'LoadBalancerListener'
      PayloadFormatVersion: '1.0'
  APIGWRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref 'ApiGwHttpEndpoint'
      RouteKey: ANY /{proxy+}
      Target: !Join
        - /
        - - integrations
          - !Ref 'ApiGwHttpEndpointIntegration'
  APIStageDefault:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref 'ApiGwHttpEndpoint'
      StageName: $default
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt 'APIGWAccessLogsGroup.Arn'
        Format: >-
          { "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "path": "$context.path", "routeKey":"$context.routeKey",
          "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength", "responseLatency":"$context.responseLatency" }
  APIGWAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/vendedlogs/apigateway/${AWS::StackName}-orch-api-gw-accesslogs'
      RetentionInDays: 14
      KmsKeyId: !GetAtt 'LoggingKmsKey.Arn'
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      SecurityGroups:
        - !GetAtt 'LoadBalancerSG.GroupId'
      Subnets:
        - !ImportValue
          Fn::Sub: ${VpcStackName}-PrivateSubnetIdA
        - !ImportValue
          Fn::Sub: ${VpcStackName}-PrivateSubnetIdB
      Type: application
      LoadBalancerAttributes:
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
        - !If
          - IsNotDevelopment
          - Key: access_logs.s3.enabled
            Value: true
          - !Ref 'AWS::NoValue'
        - !If
          - IsNotDevelopment
          - Key: access_logs.s3.bucket
            Value: !Sub 'ipv-stubs-${Environment}-access-logs'
          - !Ref 'AWS::NoValue'
        - !If
          - IsNotDevelopment
          - Key: access_logs.s3.prefix
            Value: core-stubs
          - !Ref 'AWS::NoValue'
        - !If
          - IsNotDevelopment
          - Key: deletion_protection.enabled
            Value: false
          - !Ref 'AWS::NoValue'
  LoadBalancerListenerTargetGroupECS:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200,401
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId: !ImportValue
        Fn::Sub: ${VpcStackName}-VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref 'LoadBalancer'
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - TargetGroupArn: !Ref 'LoadBalancerListenerTargetGroupECS'
          Type: forward
  OrchStubCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
  OrchStubService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref 'OrchStubCluster'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      DesiredCount: !FindInMap
        - EnvironmentConfiguration
        - !Ref 'AWS::AccountId'
        - desiredTaskCount
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 8080
          TargetGroupArn: !Ref 'LoadBalancerListenerTargetGroupECS'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt 'OrchStubECSSecurityGroup.GroupId'
          Subnets:
            - !ImportValue
              Fn::Sub: ${VpcStackName}-ProtectedSubnetIdA
            - !ImportValue
              Fn::Sub: ${VpcStackName}-ProtectedSubnetIdB
      TaskDefinition: !Ref 'ECSServiceTaskDefinition'
    DependsOn:
      - LoadBalancerListener
  OrchStubAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 1
      MinCapacity: 1
      ResourceId: !Join
        - /
        - - service
          - !Ref 'OrchStubCluster'
          - !GetAtt 'OrchStubService.Name'
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  OrchStubAutoScalingPolicy:
    DependsOn: OrchStubAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: OrchStubAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ResourceId: !Join
        - /
        - - service
          - !Ref 'OrchStubCluster'
          - !GetAtt 'OrchStubService.Name'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70
        ScaleInCooldown: 300
        ScaleOutCooldown: 60
  ECSAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/ecs/${AWS::StackName}-OrchStub-ECS'
      RetentionInDays: 14
      KmsKeyId: !GetAtt 'LoggingKmsKey.Arn'
  ECSServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: 175872367215.dkr.ecr.eu-west-2.amazonaws.com/config-mgmt-gha-ecr-imagerepository-kn0pzsusvjog:orch-stub-rogerv-1704376583
          Name: app
          Environment:
            - Name: JBP_CONFIG_OPEN_JDK_JRE
              Value: !Ref 'JbpConfigOpenJdkJre'
            - Name: JAVA_OPTS
              Value: !Ref 'JavaOpts'
            - Name: ORCHESTRATOR_CLIENT_ID
              Value: !Ref 'OrchestratorClientId'
            - Name: ORCHESTRATOR_REDIRECT_URL
              Value: !Ref 'OrchestratorRedirectUrl'
            - Name: ORCHESTRATOR_CLIENT_JWT_TTL
              Value: !Ref 'OrchestratorClientJwtTtl'
            - Name: ORCHESTRATOR_PORT
              Value: !Ref 'OrchestratorPort'
            - Name: ORCHESTRATOR_CLIENT_SIGNING_KEY
              Value: !Ref 'OrchestratorClientSigningKey'
            - Name: ORCHESTRATOR_DEFAULT_JAR_ENCRYPTION_PUBLIC_KEY
              Value: !Ref 'OrchestratorDefaultJarEncryptionPublicKey'
            - Name: IPV_BACKCHANNEL_ENDPOINT
              Value: !Ref 'IpvBackchannelEndpoint'
            - Name: IPV_BACKCHANNEL_TOKEN_PATH
              Value: !Ref 'IpvBackchannelTokenPath'
            - Name: IPV_BACKCHANNEL_USER_IDENTITY_PATH
              Value: !Ref 'IpvBackchannelUserIdentityPath'
            - Name: IPV_ENDPOINT
              Value: !Ref 'IpvEndpoint'
            - Name: IPV_CORE_AUDIENCE
              Value: !Ref 'IpvCoreAudience'
            - Name: ORCHESTRATOR_BASIC_AUTH_ENABLE
              Value: !Ref 'OrchestratorBasicAuthEnable'
            - Name: ORCHESTRATOR_BASIC_AUTH_USERNAME
              Value: !Ref 'OrchestratorBasicAuthUsername'
            - Name: ORCHESTRATOR_BASIC_AUTH_PASSWORD
              Value: !Ref 'OrchestratorBasicAuthPassword'
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'ECSAccessLogsGroup'
              awslogs-region: !Sub '${AWS::Region}'
              awslogs-stream-prefix: !Sub 'orch-stub-${Environment}'
      Cpu: !FindInMap
        - EnvironmentConfiguration
        - !Ref 'AWS::AccountId'
        - fargateCPUsize
      ExecutionRoleArn: !GetAtt 'ECSTaskExecutionRole.Arn'
      Memory: !FindInMap
        - EnvironmentConfiguration
        - !Ref 'AWS::AccountId'
        - fargateRAMsize
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt 'ECSTaskRole.Arn'
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: PullOrchStubImage
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetAuthorizationToken
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !GetAtt 'ECSAccessLogsGroup.Arn'
                  - !Sub '${ECSAccessLogsGroup.Arn}:*'
        - PolicyName: OrchStubGetSecrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/stubs/*'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref 'PermissionsBoundary'
        - !Ref 'AWS::NoValue'
    Metadata:
      checkov:
        skip:
          - id: CKV_SECRET_6
            comment: This is not sensitive
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: OrchStubGetSecrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/stubs/*'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref 'PermissionsBoundary'
        - !Ref 'AWS::NoValue'
  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - kms:*
            Resource: '*'
          - Effect: Allow
            Principal:
              Service: !Sub 'logs.${AWS::Region}.amazonaws.com'
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: '*'
            Condition:
              ArnLike:
                kms:EncryptionContext:aws:logs:arn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
Outputs:
  OrchStubEnvironment:
    Description: Orch Build Stub Environment
    Value: !Ref 'Environment'
  OrchStubDomain:
    Description: Orch Stub DNS Domain
    Value: !Ref 'CoreStubDNSRecord'
  OrchStubApiDomain:
    Description: Orch Stub API Domain
    Value: !Ref 'OrchStubApiDomain'
